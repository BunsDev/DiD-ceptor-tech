{
  "address": "0xD2cb68C10AafCdb10F9729C1bd134deF42aB9ACb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gatewayAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ART_ALT_ENDPOINT",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BACKSTORY_ENDPOINT",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "altArt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "backstory",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "callback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "characterDetails",
          "type": "string[]"
        }
      ],
      "name": "generateArtAlt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "characterClass",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "characterRace",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "characterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "background",
          "type": "string"
        }
      ],
      "name": "generateBackstory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setArtAltEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setBackstoryEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa92341c63b29dcb9c81293f167dfe42cf82e5d10c3349aca1cf39e6ca878d450",
  "receipt": {
    "to": null,
    "from": "0xD10F43A0aa00D244DAcFBE3C49b9B918B717Ff2c",
    "contractAddress": "0xD2cb68C10AafCdb10F9729C1bd134deF42aB9ACb",
    "transactionIndex": 31,
    "gasUsed": "908039",
    "logsBloom": "0x
    "blockHash": "0x4209d6fbd7b53fdf6e9836bb8254fba6bac8d2b4a2f9588b7080be9cac12cafc",
    "transactionHash": "0xa92341c63b29dcb9c81293f167dfe42cf82e5d10c3349aca1cf39e6ca878d450",
    "logs": [],
    "blockNumber": 6032004,
    "cumulativeGasUsed": "5496368",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe1fA8f43D89afE8fcBA4FABbd3e6e6a4C3360409"
  ],
  "numDeployments": 1,
  "solcInputHash": "7fc8b485b18fe0bbe53144453d1e31ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatewayAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ART_ALT_ENDPOINT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKSTORY_ENDPOINT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"altArt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"backstory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"characterDetails\",\"type\":\"string[]\"}],\"name\":\"generateArtAlt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"characterClass\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"characterRace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"characterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"}],\"name\":\"generateBackstory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setArtAltEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setBackstoryEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BackstoryFunctionClient.sol\":\"BackstoryFunctionClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_3_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"../v1_0_0/interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"../v1_0_0/interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"../v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_functionsRouter;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_functionsRouter = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_functionsRouter.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function _fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_functionsRouter)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    _fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0xdc40f1e9dea8a572d43d310afa68e978c35218d16097b9cfd9d1b6137df3cd0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/BackstoryFunctionClient.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ICCGatewayClient} from \\\"./interfaces/ICCGatewayClient.sol\\\";\\nimport {ICCGateway} from \\\"./interfaces/ICCGateway.sol\\\";\\nimport {Backgrounds} from \\\"./Characters/Backgrounds.sol\\\";\\n\\ncontract BackstoryFunctionClient is ICCGatewayClient {\\n    ICCGateway private immutable gateway;\\n\\n    uint64 public BACKSTORY_ENDPOINT = 0;\\n    uint64 public ART_ALT_ENDPOINT = 0;\\n    mapping(address => string) public backstory;\\n    mapping(address => string) public altArt;\\n\\n    constructor(address gatewayAddress) {\\n        gateway = ICCGateway(gatewayAddress);\\n    }\\n\\n    function setBackstoryEndpoint(uint64 _subscriptionId) external {\\n        BACKSTORY_ENDPOINT = _subscriptionId;\\n    }\\n\\n    function setArtAltEndpoint(uint64 _subscriptionId) external {\\n        ART_ALT_ENDPOINT = _subscriptionId;\\n    }\\n\\n    // CLASS --------------> |  Wizard\\n    // RACE --------------> |   Elf\\n    // NAME --------------> |   Eldon\\n    function generateBackstory(string calldata characterClass, string calldata characterRace, string calldata characterName, string calldata background) external {\\n        require(BACKSTORY_ENDPOINT != 0, \\\"Backstory Endpoint ID not set\\\");\\n\\n        string[] memory args = new string[](4);\\n        args[0] = characterClass;\\n        args[1] = characterRace;\\n        args[2] = characterName;\\n        args[3] = background;\\n\\n        bytes[] memory bytesArgs = new bytes[](0); // No bytes arguments for this function\\n\\n        gateway.sendRequest(BACKSTORY_ENDPOINT, args, bytesArgs, \\\"\\\");\\n    }\\n\\n    function handleBackstoryResponse(ICCGatewayClient.CCGResponse memory response) internal {\\n        backstory[msg.sender] = string(response.data);\\n    }\\n\\n    // CLASS[0] --------------> |  Wizard\\n    // RACE[1] --------------> |   Elf\\n    // NAME[2] --------------> |   Eldon\\n    // ALIGNMENT[3] --------------> |  Neutral Good\\n    // BACKGROUND[4] --------------> |  Sage\\n    // TRAITS[4] --------------> | Brave and kind-hearted\\n    // IDEALS[5] --------------> | Protect the weak\\n    // BONDS[6] --------------> |  Family\\n    // FLAWS[7] --------------> |  Trusts too easily\\n    function generateArtAlt(string[] calldata characterDetails) external {\\n        require(ART_ALT_ENDPOINT != 0, \\\"Art Alt Endpoint ID not set\\\");\\n\\n        bytes[] memory bytesArgs = new bytes[](0); // No bytes arguments for this function\\n\\n        gateway.sendRequest(ART_ALT_ENDPOINT, characterDetails, bytesArgs, \\\"\\\");\\n    }\\n\\n    function handleArtAltResponse(ICCGatewayClient.CCGResponse memory response) internal {\\n        altArt[msg.sender] = string(response.data);\\n    }\\n\\n    function callback(bytes32 requestId) external override {\\n        ICCGatewayClient.CCGResponse memory response = gateway.getResponse(requestId, true);\\n\\n        if (response.state == ICCGatewayClient.CCGResponseState.Success) {\\n            if (response.subscriptionId == BACKSTORY_ENDPOINT)\\n                return handleBackstoryResponse(response);\\n            if (response.subscriptionId == ART_ALT_ENDPOINT)\\n                return handleArtAltResponse(response);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac71fa16881944f447510e382f3ba565cf01c2eafe9db95f099133e00f6d4f3a\",\"license\":\"UNLICENSED\"},\"contracts/Characters/Backgrounds.sol\":{\"content\":\"/* experimental smart contract by Tippi Fifestarr for Ceptor Games\\n/  simply provide an on-chain querable array of public domain random backstory\\n/  other smart contracts can import this or an interface of it to get a backstory\\n/  if that contract has a source verifiable of randomness, thats very cool\\n/  Ideally, this can be upgraded to request a functions call from the Gateway\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Backgrounds {\\n    mapping(address => string) public backstory;\\n\\n    // note: backstory are as random as you make them\\n    // the alphabetical list of d&d 5e srd backgrounds\\n    string[15] public backgrounds = [\\n    \\\"Acolyte\\\",\\n    \\\"Ceptor\\\",\\n    \\\"Charlatan\\\",\\n    \\\"Criminal\\\",\\n    \\\"Entertainer\\\",\\n    \\\"Folk Hero\\\",\\n    \\\"Guild Artisan\\\",\\n    \\\"Hermit\\\",\\n    \\\"Noble\\\",\\n    \\\"Outlander\\\",\\n    \\\"Sage\\\",\\n    \\\"Sailor\\\",\\n    \\\"Soldier\\\",\\n    \\\"Urchin\\\",\\n    \\\"Vampire\\\"\\n    ];\\n    \\n    function backgroundsLength() public view returns (uint256) {\\n        return backgrounds.length;\\n    }\\n\\n    function setBackstory(string memory _backstory) public {\\n        backstory[msg.sender] = _backstory;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x795387355921a5358b70a6c331aee52ed9c2bea6bf456b6f7fc8da1c685d990b\",\"license\":\"MIT\"},\"contracts/interfaces/ICCGateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ICCGatewayClient} from './ICCGatewayClient.sol';\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/v1_3_0/FunctionsClient.sol\\\";\\n\\ninterface ICCGateway {\\n    struct CCGRequest {\\n        string name;\\n        uint32 callbackGasLimit;\\n        FunctionsRequest.Request config;\\n    }\\n\\n    /**\\n     * @dev Can't register a request with an empty name\\n     */\\n    error CCGRequestNameEmpty();\\n\\n    /**\\n     * @dev Only the same source of the requestId is allowed to call the function\\n     */\\n    error CCGOnlySameSourceAllowed(bytes32 requestId);\\n\\n    /**\\n     * @dev Only a registered subscriptionId is allowed to call the function\\n     */\\n    error CCGRequestNotRegistered(uint64 subscriptionId);\\n\\n    /**\\n     * @dev Can't fulfill a request that has already been fulfilled\\n     */\\n    error CCGRequestAlreadyFulfilled(bytes32 requestId);\\n\\n    /**\\n     * @dev Only A manager can call the function\\n     */\\n    error CCGOnlyManagerAllowed();\\n\\n    /**\\n     * @dev Send a request to the Functions DON\\n     */\\n    function sendRequest(\\n        uint64 subscriptionId,\\n        string[] calldata args,\\n        bytes[] calldata bytesArgs,\\n        bytes calldata encryptedSecretsReference\\n    ) external returns (bytes32 requestId);\\n\\n    function getResponse(bytes32 requestId, bool remove) external returns (ICCGatewayClient.CCGResponse memory resp);\\n}\\n\",\"keccak256\":\"0xbc7d92f8db240767c8636e8df9b818cc1f5abfde22b8c49eee50f418fb0dbea5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICCGatewayClient.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ICCGatewayClient {\\n    enum CCGResponseState {Sent, Success, Error}\\n\\n    struct CCGResponse {\\n        uint64 subscriptionId;\\n        address source;\\n        CCGResponseState state;\\n        bytes data;\\n        bytes error;\\n    }\\n\\n    function callback(bytes32 requestId) external;\\n}\\n\",\"keccak256\":\"0xb69320aa2152f374dec4cfc70b73f46e0db9774a1411d2acff1481ee3295f86a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052600080546001600160801b031916905534801561002057600080fd5b5060405161100f38038061100f83398101604081905261003f91610050565b6001600160a01b0316608052610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b608051610f666100a9600039600081816104aa0152818161055d01526106e30152610f666000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063aace35c511610066578063aace35c51461015f578063c948b8ca14610172578063cb0b934d14610185578063df13994e1461019f578063f18c5c34146101b257600080fd5b806307232bfd146100985780630da411c5146100c15780631e3ebdef146100f45780636fa2577e14610134575b600080fd5b6100ab6100a63660046107d5565b6101c5565b6040516100b89190610849565b60405180910390f35b6100f26100cf366004610871565b6000805467ffffffffffffffff19166001600160401b0392909216919091179055565b005b6100f2610102366004610871565b600080546001600160401b03909216600160401b026fffffffffffffffff000000000000000019909216919091179055565b600054610147906001600160401b031681565b6040516001600160401b0390911681526020016100b8565b6100ab61016d3660046107d5565b61025f565b6100f26101803660046108d6565b610278565b60005461014790600160401b90046001600160401b031681565b6100f26101ad366004610999565b61053d565b6100f26101c03660046109b2565b610640565b600160205260009081526040902080546101de90610a26565b80601f016020809104026020016040519081016040528092919081815260200182805461020a90610a26565b80156102575780601f1061022c57610100808354040283529160200191610257565b820191906000526020600020905b81548152906001019060200180831161023a57829003601f168201915b505050505081565b600260205260009081526040902080546101de90610a26565b600080546001600160401b031690036102d85760405162461bcd60e51b815260206004820152601d60248201527f4261636b73746f727920456e64706f696e74204944206e6f742073657400000060448201526064015b60405180910390fd5b60408051600480825260a08201909252600091816020015b60608152602001906001900390816102f057905050905088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061035157610351610a76565b602002602001018190525086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505083518492506001915081106103a7576103a7610a76565b602002602001018190525084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505083518492506002915081106103fd576103fd610a76565b602002602001018190525082828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050835184925060039150811061045357610453610a76565b6020908102919091018101919091526040805160008082529281019091528161048c565b60608152602001906001900390816104775790505b50600054604051634b60ac1760e11b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916396c1582e916104ed916001600160401b039091169086908690600401610ae1565b6020604051808303816000875af115801561050c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105309190610b7a565b5050505050505050505050565b6040516315b851d160e01b815260048101829052600160248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906315b851d1906044016000604051808303816000875af11580156105ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d69190810190610c4c565b90506001816040015160028111156105f0576105f0610d13565b036106155760005481516001600160401b03918216911603610619576106158161077f565b5050565b60005481516001600160401b03600160401b9092048216911603610615576106158161079e565b60008054600160401b90046001600160401b031690036106a25760405162461bcd60e51b815260206004820152601b60248201527f41727420416c7420456e64706f696e74204944206e6f7420736574000000000060448201526064016102cf565b60408051600080825260208201909252816106cd565b60608152602001906001900390816106b85790505b50600054604051634b60ac1760e11b81529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916396c1582e9161073691600160401b9091046001600160401b031690879087908790600401610d52565b6020604051808303816000875af1158015610755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107799190610b7a565b50505050565b6060810151336000908152600160205260409020906106159082610e71565b6060810151336000908152600260205260409020906106159082610e71565b6001600160a01b03811681146107d257600080fd5b50565b6000602082840312156107e757600080fd5b81356107f2816107bd565b9392505050565b60005b838110156108145781810151838201526020016107fc565b50506000910152565b600081518084526108358160208601602086016107f9565b601f01601f19169290920160200192915050565b6020815260006107f2602083018461081d565b6001600160401b03811681146107d257600080fd5b60006020828403121561088357600080fd5b81356107f28161085c565b60008083601f8401126108a057600080fd5b5081356001600160401b038111156108b757600080fd5b6020830191508360208285010111156108cf57600080fd5b9250929050565b6000806000806000806000806080898b0312156108f257600080fd5b88356001600160401b038082111561090957600080fd5b6109158c838d0161088e565b909a50985060208b013591508082111561092e57600080fd5b61093a8c838d0161088e565b909850965060408b013591508082111561095357600080fd5b61095f8c838d0161088e565b909650945060608b013591508082111561097857600080fd5b506109858b828c0161088e565b999c989b5096995094979396929594505050565b6000602082840312156109ab57600080fd5b5035919050565b600080602083850312156109c557600080fd5b82356001600160401b03808211156109dc57600080fd5b818501915085601f8301126109f057600080fd5b8135818111156109ff57600080fd5b8660208260051b8501011115610a1457600080fd5b60209290920196919550909350505050565b600181811c90821680610a3a57607f821691505b602082108103610a5a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b85811015610ad4578284038952610ac284835161081d565b98850198935090840190600101610aaa565b5091979650505050505050565b6000608082016001600160401b0386168352602060808185015281865180845260a08601915060a08160051b870101935082880160005b82811015610b4657609f19888703018452610b3486835161081d565b95509284019290840190600101610b18565b50505050508281036040840152610b5d8185610a8c565b8381036060850152600081529050602081015b9695505050505050565b600060208284031215610b8c57600080fd5b5051919050565b60405160a081016001600160401b0381118282101715610bb557610bb5610a60565b60405290565b805160038110610bca57600080fd5b919050565b600082601f830112610be057600080fd5b81516001600160401b0380821115610bfa57610bfa610a60565b604051601f8301601f19908116603f01168101908282118183101715610c2257610c22610a60565b81604052838152866020858801011115610c3b57600080fd5b610b708460208301602089016107f9565b600060208284031215610c5e57600080fd5b81516001600160401b0380821115610c7557600080fd5b9083019060a08286031215610c8957600080fd5b610c91610b93565b8251610c9c8161085c565b81526020830151610cac816107bd565b6020820152610cbd60408401610bbb565b6040820152606083015182811115610cd457600080fd5b610ce087828601610bcf565b606083015250608083015182811115610cf857600080fd5b610d0487828601610bcf565b60808301525095945050505050565b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000608082016001600160401b03808816845260206080818601528287845260a08601905060a08860051b87010193508860005b89811015610dee57878603609f190183528135368c9003601e19018112610dac57600080fd5b8b01848101903586811115610dc057600080fd5b803603821315610dcf57600080fd5b610dda888284610d29565b975050509183019190830190600101610d86565b50505050508281036040840152610e058185610a8c565b838103606085015260008152905060208101979650505050505050565b601f821115610e6c57600081815260208120601f850160051c81016020861015610e495750805b601f850160051c820191505b81811015610e6857828155600101610e55565b5050505b505050565b81516001600160401b03811115610e8a57610e8a610a60565b610e9e81610e988454610a26565b84610e22565b602080601f831160018114610ed35760008415610ebb5750858301515b600019600386901b1c1916600185901b178555610e68565b600085815260208120601f198616915b82811015610f0257888601518255948401946001909101908401610ee3565b5085821015610f205787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d858780a7f6d153d3250d7445da1065600277208add8e4028f215101fc6cdc1664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063aace35c511610066578063aace35c51461015f578063c948b8ca14610172578063cb0b934d14610185578063df13994e1461019f578063f18c5c34146101b257600080fd5b806307232bfd146100985780630da411c5146100c15780631e3ebdef146100f45780636fa2577e14610134575b600080fd5b6100ab6100a63660046107d5565b6101c5565b6040516100b89190610849565b60405180910390f35b6100f26100cf366004610871565b6000805467ffffffffffffffff19166001600160401b0392909216919091179055565b005b6100f2610102366004610871565b600080546001600160401b03909216600160401b026fffffffffffffffff000000000000000019909216919091179055565b600054610147906001600160401b031681565b6040516001600160401b0390911681526020016100b8565b6100ab61016d3660046107d5565b61025f565b6100f26101803660046108d6565b610278565b60005461014790600160401b90046001600160401b031681565b6100f26101ad366004610999565b61053d565b6100f26101c03660046109b2565b610640565b600160205260009081526040902080546101de90610a26565b80601f016020809104026020016040519081016040528092919081815260200182805461020a90610a26565b80156102575780601f1061022c57610100808354040283529160200191610257565b820191906000526020600020905b81548152906001019060200180831161023a57829003601f168201915b505050505081565b600260205260009081526040902080546101de90610a26565b600080546001600160401b031690036102d85760405162461bcd60e51b815260206004820152601d60248201527f4261636b73746f727920456e64706f696e74204944206e6f742073657400000060448201526064015b60405180910390fd5b60408051600480825260a08201909252600091816020015b60608152602001906001900390816102f057905050905088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061035157610351610a76565b602002602001018190525086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505083518492506001915081106103a7576103a7610a76565b602002602001018190525084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505083518492506002915081106103fd576103fd610a76565b602002602001018190525082828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050835184925060039150811061045357610453610a76565b6020908102919091018101919091526040805160008082529281019091528161048c565b60608152602001906001900390816104775790505b50600054604051634b60ac1760e11b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916396c1582e916104ed916001600160401b039091169086908690600401610ae1565b6020604051808303816000875af115801561050c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105309190610b7a565b5050505050505050505050565b6040516315b851d160e01b815260048101829052600160248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906315b851d1906044016000604051808303816000875af11580156105ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d69190810190610c4c565b90506001816040015160028111156105f0576105f0610d13565b036106155760005481516001600160401b03918216911603610619576106158161077f565b5050565b60005481516001600160401b03600160401b9092048216911603610615576106158161079e565b60008054600160401b90046001600160401b031690036106a25760405162461bcd60e51b815260206004820152601b60248201527f41727420416c7420456e64706f696e74204944206e6f7420736574000000000060448201526064016102cf565b60408051600080825260208201909252816106cd565b60608152602001906001900390816106b85790505b50600054604051634b60ac1760e11b81529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916396c1582e9161073691600160401b9091046001600160401b031690879087908790600401610d52565b6020604051808303816000875af1158015610755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107799190610b7a565b50505050565b6060810151336000908152600160205260409020906106159082610e71565b6060810151336000908152600260205260409020906106159082610e71565b6001600160a01b03811681146107d257600080fd5b50565b6000602082840312156107e757600080fd5b81356107f2816107bd565b9392505050565b60005b838110156108145781810151838201526020016107fc565b50506000910152565b600081518084526108358160208601602086016107f9565b601f01601f19169290920160200192915050565b6020815260006107f2602083018461081d565b6001600160401b03811681146107d257600080fd5b60006020828403121561088357600080fd5b81356107f28161085c565b60008083601f8401126108a057600080fd5b5081356001600160401b038111156108b757600080fd5b6020830191508360208285010111156108cf57600080fd5b9250929050565b6000806000806000806000806080898b0312156108f257600080fd5b88356001600160401b038082111561090957600080fd5b6109158c838d0161088e565b909a50985060208b013591508082111561092e57600080fd5b61093a8c838d0161088e565b909850965060408b013591508082111561095357600080fd5b61095f8c838d0161088e565b909650945060608b013591508082111561097857600080fd5b506109858b828c0161088e565b999c989b5096995094979396929594505050565b6000602082840312156109ab57600080fd5b5035919050565b600080602083850312156109c557600080fd5b82356001600160401b03808211156109dc57600080fd5b818501915085601f8301126109f057600080fd5b8135818111156109ff57600080fd5b8660208260051b8501011115610a1457600080fd5b60209290920196919550909350505050565b600181811c90821680610a3a57607f821691505b602082108103610a5a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b85811015610ad4578284038952610ac284835161081d565b98850198935090840190600101610aaa565b5091979650505050505050565b6000608082016001600160401b0386168352602060808185015281865180845260a08601915060a08160051b870101935082880160005b82811015610b4657609f19888703018452610b3486835161081d565b95509284019290840190600101610b18565b50505050508281036040840152610b5d8185610a8c565b8381036060850152600081529050602081015b9695505050505050565b600060208284031215610b8c57600080fd5b5051919050565b60405160a081016001600160401b0381118282101715610bb557610bb5610a60565b60405290565b805160038110610bca57600080fd5b919050565b600082601f830112610be057600080fd5b81516001600160401b0380821115610bfa57610bfa610a60565b604051601f8301601f19908116603f01168101908282118183101715610c2257610c22610a60565b81604052838152866020858801011115610c3b57600080fd5b610b708460208301602089016107f9565b600060208284031215610c5e57600080fd5b81516001600160401b0380821115610c7557600080fd5b9083019060a08286031215610c8957600080fd5b610c91610b93565b8251610c9c8161085c565b81526020830151610cac816107bd565b6020820152610cbd60408401610bbb565b6040820152606083015182811115610cd457600080fd5b610ce087828601610bcf565b606083015250608083015182811115610cf857600080fd5b610d0487828601610bcf565b60808301525095945050505050565b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000608082016001600160401b03808816845260206080818601528287845260a08601905060a08860051b87010193508860005b89811015610dee57878603609f190183528135368c9003601e19018112610dac57600080fd5b8b01848101903586811115610dc057600080fd5b803603821315610dcf57600080fd5b610dda888284610d29565b975050509183019190830190600101610d86565b50505050508281036040840152610e058185610a8c565b838103606085015260008152905060208101979650505050505050565b601f821115610e6c57600081815260208120601f850160051c81016020861015610e495750805b601f850160051c820191505b81811015610e6857828155600101610e55565b5050505b505050565b81516001600160401b03811115610e8a57610e8a610a60565b610e9e81610e988454610a26565b84610e22565b602080601f831160018114610ed35760008415610ebb5750858301515b600019600386901b1c1916600185901b178555610e68565b600085815260208120601f198616915b82811015610f0257888601518255948401946001909101908401610ee3565b5085821015610f205787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d858780a7f6d153d3250d7445da1065600277208add8e4028f215101fc6cdc1664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2609,
        "contract": "contracts/BackstoryFunctionClient.sol:BackstoryFunctionClient",
        "label": "BACKSTORY_ENDPOINT",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 2612,
        "contract": "contracts/BackstoryFunctionClient.sol:BackstoryFunctionClient",
        "label": "ART_ALT_ENDPOINT",
        "offset": 8,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 2616,
        "contract": "contracts/BackstoryFunctionClient.sol:BackstoryFunctionClient",
        "label": "backstory",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2620,
        "contract": "contracts/BackstoryFunctionClient.sol:BackstoryFunctionClient",
        "label": "altArt",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}