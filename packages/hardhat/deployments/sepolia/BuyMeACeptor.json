{
  "address": "0x020999680495306B53376190A9C364c8797898f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gamesToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "InvalidArguments",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "BuyMeACeptorWorldEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameMasterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vibe",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameMasterName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameMasterTwitterHandle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "NewWorld",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "vibe",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gameMasterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gameMasterTwitterHandle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "buyWorld",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesToken",
      "outputs": [
        {
          "internalType": "contract GamesToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWorlds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "vibe",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gameMasterName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gameMasterTwitterHandle",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gameMasterAddress",
              "type": "address"
            }
          ],
          "internalType": "struct World[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "modifyWorldDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeWorld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTips",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "worlds",
      "outputs": [
        {
          "internalType": "string",
          "name": "vibe",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gameMasterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gameMasterTwitterHandle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gameMasterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x800ba2191a578b0b2b1377eef4cc0bb0f76184dad5e08d347848507c6dcc9f88",
  "receipt": {
    "to": null,
    "from": "0xD10F43A0aa00D244DAcFBE3C49b9B918B717Ff2c",
    "contractAddress": "0x020999680495306B53376190A9C364c8797898f1",
    "transactionIndex": 93,
    "gasUsed": "1729036",
    "logsBloom": "0x
    "blockHash": "0x1b13558c713fcb4f828971f364a3cab82427ced4facf76fea15600a6409fc0d3",
    "transactionHash": "0x800ba2191a578b0b2b1377eef4cc0bb0f76184dad5e08d347848507c6dcc9f88",
    "logs": [],
    "blockNumber": 6034088,
    "cumulativeGasUsed": "11088013",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf1866d6A07Fc758EcD1e3b0AbfD6882d986DA940"
  ],
  "numDeployments": 2,
  "solcInputHash": "906c290c6fc2d1010306cc04cd2473c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gamesToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyMeACeptorWorldEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameMasterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vibe\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameMasterName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameMasterTwitterHandle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"NewWorld\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"vibe\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gameMasterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gameMasterTwitterHandle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"buyWorld\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesToken\",\"outputs\":[{\"internalType\":\"contract GamesToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorlds\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"vibe\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gameMasterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gameMasterTwitterHandle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameMasterAddress\",\"type\":\"address\"}],\"internalType\":\"struct World[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"modifyWorldDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeWorld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worlds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"vibe\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gameMasterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gameMasterTwitterHandle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameMasterAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"BuyMeACeptorWorld contract to accept donations and for our users to create a world for us\",\"kind\":\"dev\",\"methods\":{\"buyWorld(string,string,string,string)\":{\"details\":\"Function to buy a world\",\"params\":{\"description\":\"The description of the world (Note: Using calldata for gas efficiency)\",\"gameMasterName\":\"The name of the game master\",\"gameMasterTwitterHandle\":\"The Twitter handle of the game master\"}},\"getWorlds()\":{\"details\":\"Function to get the worlds\"},\"modifyWorldDescription(uint256,string)\":{\"details\":\"Function to modify a world description\",\"params\":{\"description\":\"The description of the world\",\"index\":\"The index of the world\"}},\"removeWorld(uint256)\":{\"details\":\"Function to remove a world\",\"params\":{\"index\":\"The index of the world\"}},\"withdrawTips()\":{\"details\":\"Function to withdraw the balance\"}},\"title\":\"BuyMeACeptorWorld\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BuyMeACeptor.sol\":\"BuyMeACeptor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/BuyMeACeptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./GamesToken.sol\\\";\\n\\n/**\\n * @title World\\n * @dev World struct\\n */\\n    struct World {\\n        string vibe;\\n        string gameMasterName;\\n        string gameMasterTwitterHandle;\\n        string description;\\n        uint256 time;\\n        address gameMasterAddress;\\n    }\\n\\n/**\\n * @title BuyMeACeptorWorld\\n * @dev BuyMeACeptorWorld contract to accept donations and for our users to create a world for us\\n */\\ncontract BuyMeACeptor {\\n    address payable public owner;\\n    uint256 public price;\\n    World[] public worlds;\\n\\n    GamesToken public gamesToken;\\n\\n    error InsufficientFunds();\\n    error InvalidArguments(string message);\\n    error OnlyOwner();\\n\\n    event BuyMeACeptorWorldEvent(address indexed buyer, uint256 price);\\n    event NewWorld(address indexed gameMasterAddress, uint256 time, string vibe, string gameMasterName, string gameMasterTwitterHandle, string description);\\n\\n    constructor(address _gamesToken) {\\n        owner = payable(msg.sender);\\n        price = 10 * 10 ** 18; // 10 gamesTokens\\n        gamesToken = GamesToken(_gamesToken);\\n    }\\n\\n    /**\\n     * WRITE FUNCTIONS *************\\n     */\\n\\n    /**\\n     * @dev Function to buy a world\\n     * @param  gameMasterName The name of the game master\\n     * @param  gameMasterTwitterHandle The Twitter handle of the game master\\n     * @param  description The description of the world\\n     * (Note: Using calldata for gas efficiency)\\n     */\\n    function buyWorld(string calldata vibe, string calldata gameMasterName, string calldata gameMasterTwitterHandle, string calldata description) public payable {\\n        if (msg.value < price) {\\n            revert InsufficientFunds();\\n        }\\n\\n        emit BuyMeACeptorWorldEvent(msg.sender, msg.value);\\n\\n        if (bytes(gameMasterName).length == 0 && bytes(description).length == 0) {\\n            revert InvalidArguments(\\\"Invalid gameMasterName or description\\\");\\n        }\\n\\n        worlds.push(World(vibe, gameMasterName, gameMasterTwitterHandle, description, block.timestamp, msg.sender));\\n\\n        emit NewWorld(msg.sender, block.timestamp, vibe, gameMasterName, gameMasterTwitterHandle, description);\\n    }\\n\\n    /**\\n     * @dev Function to remove a world\\n     * @param  index The index of the world\\n     */\\n    function removeWorld(uint256 index) public {\\n        if (index >= worlds.length) {\\n            revert InvalidArguments(\\\"Invalid index\\\");\\n        }\\n\\n        World memory world = worlds[index];\\n\\n        // if operation isnt sent from the same game master or the owner, then not allowed\\n        if (world.gameMasterAddress != msg.sender && msg.sender != owner) {\\n            revert InvalidArguments(\\\"Operation not allowed\\\");\\n        }\\n\\n        World memory indexWorld = worlds[index];\\n        worlds[index] = worlds[worlds.length - 1];\\n        worlds[worlds.length - 1] = indexWorld;\\n        worlds.pop();\\n    }\\n\\n    /**\\n     * @dev Function to modify a world description\\n     * @param  index The index of the world\\n     * @param  description The description of the world\\n     */\\n    function modifyWorldDescription(uint256 index, string memory description) public {\\n        if (index >= worlds.length) {\\n            revert InvalidArguments(\\\"Invalid index\\\");\\n        }\\n\\n        World memory world = worlds[index];\\n\\n        if (world.gameMasterAddress != msg.sender || msg.sender != owner) {\\n            revert InvalidArguments(\\\"Operation not allowed\\\");\\n        }\\n\\n        worlds[index].description = description;\\n    }\\n\\n    /**\\n     * @dev Function to withdraw the balance\\n     */\\n    function withdrawTips() public {\\n        if (msg.sender != owner) {\\n            revert OnlyOwner();\\n        }\\n\\n        if (address(this).balance == 0) {\\n            revert InsufficientFunds();\\n        }\\n\\n        (bool sent,) = owner.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * READ FUNCTIONS *************\\n     */\\n\\n    /**\\n     * @dev Function to get the worlds\\n     */\\n    function getWorlds() public view returns (World[] memory) {\\n        return worlds;\\n    }\\n\\n    /**\\n     * @dev Recieve function to accept ether\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x10e130dc121b3349076c83ed961d88acf28f575853d636f2921e4ddc597eb26c\",\"license\":\"MIT\"},\"contracts/GamesToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract GamesToken is ERC20, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor() ERC20(\\\"GamesToken\\\", \\\"GT\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    function addMinter(address minter) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(MINTER_ROLE, minter);\\n    }\\n\\n    function removeMinter(address minter) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _revokeRole(MINTER_ROLE, minter);\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n}\",\"keccak256\":\"0xd467774e7aef5725a44bd24dc533bfdcfe9d983782a985b4aa1dbc6ff25ed615\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611dbc380380611dbc83398101604081905261002f9161006e565b60008054336001600160a01b031991821617909155678ac7230489e80000600155600380549091166001600160a01b039290921691909117905561009e565b60006020828403121561008057600080fd5b81516001600160a01b038116811461009757600080fd5b9392505050565b611d0f806100ad6000396000f3fe60806040526004361061008a5760003560e01c806354cdd6d41161005957806354cdd6d41461012a5780637c081d4a146101625780637d82c52b146101825780638da5cb5b14610195578063a035b1fe146101b557600080fd5b806320891089146100965780632af84af0146100b85780633a1956ce146100e35780633aaa74b21461011557600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b1366004611661565b6101d9565b005b3480156100c457600080fd5b506100cd610558565b6040516100da9190611762565b60405180910390f35b3480156100ef57600080fd5b506101036100fe36600461183b565b610822565b6040516100da96959493929190611854565b34801561012157600080fd5b506100b6610a98565b34801561013657600080fd5b5060035461014a906001600160a01b031681565b6040516001600160a01b0390911681526020016100da565b34801561016e57600080fd5b506100b661017d36600461183b565b610b81565b6100b661019036600461190e565b611351565b3480156101a157600080fd5b5060005461014a906001600160a01b031681565b3480156101c157600080fd5b506101cb60015481565b6040519081526020016100da565b600254821061022057604051630aec738560e11b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b600060028381548110610235576102356119d2565b90600052602060002090600602016040518060c001604052908160008201805461025e906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461028a906119e8565b80156102d75780601f106102ac576101008083540402835291602001916102d7565b820191906000526020600020905b8154815290600101906020018083116102ba57829003601f168201915b505050505081526020016001820180546102f0906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461031c906119e8565b80156103695780601f1061033e57610100808354040283529160200191610369565b820191906000526020600020905b81548152906001019060200180831161034c57829003601f168201915b50505050508152602001600282018054610382906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae906119e8565b80156103fb5780601f106103d0576101008083540402835291602001916103fb565b820191906000526020600020905b8154815290600101906020018083116103de57829003601f168201915b50505050508152602001600382018054610414906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610440906119e8565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0390811660409092019190915260a082015191925016331415806104db57506000546001600160a01b03163314155b1561052157604051630aec738560e11b815260206004820152601560248201527413dc195c985d1a5bdb881b9bdd08185b1b1bddd959605a1b6044820152606401610217565b8160028481548110610535576105356119d2565b906000526020600020906006020160030190816105529190611a71565b50505050565b60606002805480602002602001604051908101604052809291908181526020016000905b8282101561081957838290600052602060002090600602016040518060c00160405290816000820180546105af906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906119e8565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b50505050508152602001600182018054610641906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461066d906119e8565b80156106ba5780601f1061068f576101008083540402835291602001916106ba565b820191906000526020600020905b81548152906001019060200180831161069d57829003601f168201915b505050505081526020016002820180546106d3906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546106ff906119e8565b801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b50505050508152602001600382018054610765906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610791906119e8565b80156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b505050918352505060048201546020808301919091526005909201546001600160a01b0316604090910152908252600192909201910161057c565b50505050905090565b6002818154811061083257600080fd5b9060005260206000209060060201600091509050806000018054610855906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906119e8565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050908060010180546108e3906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461090f906119e8565b801561095c5780601f106109315761010080835404028352916020019161095c565b820191906000526020600020905b81548152906001019060200180831161093f57829003601f168201915b505050505090806002018054610971906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461099d906119e8565b80156109ea5780601f106109bf576101008083540402835291602001916109ea565b820191906000526020600020905b8154815290600101906020018083116109cd57829003601f168201915b5050505050908060030180546109ff906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2b906119e8565b8015610a785780601f10610a4d57610100808354040283529160200191610a78565b820191906000526020600020905b815481529060010190602001808311610a5b57829003601f168201915b5050505060048301546005909301549192916001600160a01b0316905086565b6000546001600160a01b03163314610ac357604051635fc483c560e01b815260040160405180910390fd5b47600003610ae45760405163356680b760e01b815260040160405180910390fd5b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610b31576040519150601f19603f3d011682016040523d82523d6000602084013e610b36565b606091505b5050905080610b7e5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610217565b50565b6002548110610bc357604051630aec738560e11b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610217565b600060028281548110610bd857610bd86119d2565b90600052602060002090600602016040518060c0016040529081600082018054610c01906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2d906119e8565b8015610c7a5780601f10610c4f57610100808354040283529160200191610c7a565b820191906000526020600020905b815481529060010190602001808311610c5d57829003601f168201915b50505050508152602001600182018054610c93906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbf906119e8565b8015610d0c5780601f10610ce157610100808354040283529160200191610d0c565b820191906000526020600020905b815481529060010190602001808311610cef57829003601f168201915b50505050508152602001600282018054610d25906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d51906119e8565b8015610d9e5780601f10610d7357610100808354040283529160200191610d9e565b820191906000526020600020905b815481529060010190602001808311610d8157829003601f168201915b50505050508152602001600382018054610db7906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610de3906119e8565b8015610e305780601f10610e0557610100808354040283529160200191610e30565b820191906000526020600020905b815481529060010190602001808311610e1357829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0390811660409092019190915260a0820151919250163314801590610e7f57506000546001600160a01b03163314155b15610ec557604051630aec738560e11b815260206004820152601560248201527413dc195c985d1a5bdb881b9bdd08185b1b1bddd959605a1b6044820152606401610217565b600060028381548110610eda57610eda6119d2565b90600052602060002090600602016040518060c0016040529081600082018054610f03906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2f906119e8565b8015610f7c5780601f10610f5157610100808354040283529160200191610f7c565b820191906000526020600020905b815481529060010190602001808311610f5f57829003601f168201915b50505050508152602001600182018054610f95906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc1906119e8565b801561100e5780601f10610fe35761010080835404028352916020019161100e565b820191906000526020600020905b815481529060010190602001808311610ff157829003601f168201915b50505050508152602001600282018054611027906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611053906119e8565b80156110a05780601f10611075576101008083540402835291602001916110a0565b820191906000526020600020905b81548152906001019060200180831161108357829003601f168201915b505050505081526020016003820180546110b9906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546110e5906119e8565b80156111325780601f1061110757610100808354040283529160200191611132565b820191906000526020600020905b81548152906001019060200180831161111557829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0316604090910152600280549192509061116d90600190611b31565b8154811061117d5761117d6119d2565b90600052602060002090600602016002848154811061119e5761119e6119d2565b60009182526020909120600690910201806111b98382611b58565b506001818101906111cc90840182611b58565b506002818101906111df90840182611b58565b506003818101906111f290840182611b58565b5060048281015490820155600591820154910180546001600160a01b0319166001600160a01b039092169190911790556002805482919061123590600190611b31565b81548110611245576112456119d2565b6000918252602090912082516006909202019081906112649082611a71565b50602082015160018201906112799082611a71565b506040820151600282019061128e9082611a71565b50606082015160038201906112a39082611a71565b506080820151600482015560a090910151600590910180546001600160a01b0319166001600160a01b0390921691909117905560028054806112e7576112e7611c33565b6000828152602081206000199092019160068302019061130782826115fd565b6113156001830160006115fd565b6113236002830160006115fd565b6113316003830160006115fd565b506000600482015560050180546001600160a01b03191690559055505050565b6001543410156113745760405163356680b760e01b815260040160405180910390fd5b60405134815233907f51af70828e001e43c03fdaeaa7b0566d85d6ca32cbe6dbb863e517af913c80ff9060200160405180910390a2841580156113b5575080155b1561141157604051630aec738560e11b815260206004820152602560248201527f496e76616c69642067616d654d61737465724e616d65206f7220646573637269604482015264383a34b7b760d91b6064820152608401610217565b6040805160e06020601f8b01819004028201810190925260c081018981526002928291908c908c9081908501838280828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092019190915250505090825250604080516020601f8701819004810282018101909252858152918101919086908690819084018382808284376000920182905250938552505042602080850191909152336040909401939093525083546001810185559381522081519192600602019081906115379082611a71565b506020820151600182019061154c9082611a71565b50604082015160028201906115619082611a71565b50606082015160038201906115769082611a71565b506080820151600482015560a090910151600590910180546001600160a01b0319166001600160a01b0390921691909117905560405133907fdc5d3ce31adddd945bbdcce5d8623f0a925872c51fbba0957a3721a21d5f4e69906115eb9042908c908c908c908c908c908c908c908c90611c72565b60405180910390a25050505050505050565b508054611609906119e8565b6000825580601f10611619575050565b601f016020900490600052602060002090810190610b7e91905b808211156116475760008155600101611633565b5090565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561167457600080fd5b82359150602083013567ffffffffffffffff8082111561169357600080fd5b818501915085601f8301126116a757600080fd5b8135818111156116b9576116b961164b565b604051601f8201601f19908116603f011681019083821181831017156116e1576116e161164b565b816040528281528860208487010111156116fa57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b8181101561174257602081850181015186830182015201611726565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561182d57603f19898403018552815160c081518186526117af8287018261171c565b915050888201518582038a8701526117c7828261171c565b91505087820151858203898701526117df828261171c565b915050606080830151868303828801526117f9838261171c565b6080858101519089015260a0948501516001600160a01b031694909701939093525050509386019390860190600101611789565b509098975050505050505050565b60006020828403121561184d57600080fd5b5035919050565b60c08152600061186760c083018961171c565b8281036020840152611879818961171c565b9050828103604084015261188d818861171c565b905082810360608401526118a1818761171c565b608084019590955250506001600160a01b039190911660a090910152949350505050565b60008083601f8401126118d757600080fd5b50813567ffffffffffffffff8111156118ef57600080fd5b60208301915083602082850101111561190757600080fd5b9250929050565b6000806000806000806000806080898b03121561192a57600080fd5b883567ffffffffffffffff8082111561194257600080fd5b61194e8c838d016118c5565b909a50985060208b013591508082111561196757600080fd5b6119738c838d016118c5565b909850965060408b013591508082111561198c57600080fd5b6119988c838d016118c5565b909650945060608b01359150808211156119b157600080fd5b506119be8b828c016118c5565b999c989b5096995094979396929594505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806119fc57607f821691505b602082108103611a1c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611a6c57600081815260208120601f850160051c81016020861015611a495750805b601f850160051c820191505b81811015611a6857828155600101611a55565b5050505b505050565b815167ffffffffffffffff811115611a8b57611a8b61164b565b611a9f81611a9984546119e8565b84611a22565b602080601f831160018114611ad45760008415611abc5750858301515b600019600386901b1c1916600185901b178555611a68565b600085815260208120601f198616915b82811015611b0357888601518255948401946001909101908401611ae4565b5085821015611b215787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115611b5257634e487b7160e01b600052601160045260246000fd5b92915050565b818103611b63575050565b611b6d82546119e8565b67ffffffffffffffff811115611b8557611b8561164b565b611b9381611a9984546119e8565b6000601f821160018114611bc75760008315611baf5750848201545b600019600385901b1c1916600184901b178455611c2c565b600085815260209020601f19841690600086815260209020845b83811015611c015782860154825560019586019590910190602001611be1565b5085831015611c1f5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260a060208201526000611c8c60a083018a8c611c49565b8281036040840152611c9f81898b611c49565b90508281036060840152611cb4818789611c49565b90508281036080840152611cc9818587611c49565b9c9b50505050505050505050505056fea264697066735822122054b943bc5ad0029cb0793d678dabef90b9d17186529191149e58b50633802a8c64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c806354cdd6d41161005957806354cdd6d41461012a5780637c081d4a146101625780637d82c52b146101825780638da5cb5b14610195578063a035b1fe146101b557600080fd5b806320891089146100965780632af84af0146100b85780633a1956ce146100e35780633aaa74b21461011557600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b1366004611661565b6101d9565b005b3480156100c457600080fd5b506100cd610558565b6040516100da9190611762565b60405180910390f35b3480156100ef57600080fd5b506101036100fe36600461183b565b610822565b6040516100da96959493929190611854565b34801561012157600080fd5b506100b6610a98565b34801561013657600080fd5b5060035461014a906001600160a01b031681565b6040516001600160a01b0390911681526020016100da565b34801561016e57600080fd5b506100b661017d36600461183b565b610b81565b6100b661019036600461190e565b611351565b3480156101a157600080fd5b5060005461014a906001600160a01b031681565b3480156101c157600080fd5b506101cb60015481565b6040519081526020016100da565b600254821061022057604051630aec738560e11b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b600060028381548110610235576102356119d2565b90600052602060002090600602016040518060c001604052908160008201805461025e906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461028a906119e8565b80156102d75780601f106102ac576101008083540402835291602001916102d7565b820191906000526020600020905b8154815290600101906020018083116102ba57829003601f168201915b505050505081526020016001820180546102f0906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461031c906119e8565b80156103695780601f1061033e57610100808354040283529160200191610369565b820191906000526020600020905b81548152906001019060200180831161034c57829003601f168201915b50505050508152602001600282018054610382906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae906119e8565b80156103fb5780601f106103d0576101008083540402835291602001916103fb565b820191906000526020600020905b8154815290600101906020018083116103de57829003601f168201915b50505050508152602001600382018054610414906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610440906119e8565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0390811660409092019190915260a082015191925016331415806104db57506000546001600160a01b03163314155b1561052157604051630aec738560e11b815260206004820152601560248201527413dc195c985d1a5bdb881b9bdd08185b1b1bddd959605a1b6044820152606401610217565b8160028481548110610535576105356119d2565b906000526020600020906006020160030190816105529190611a71565b50505050565b60606002805480602002602001604051908101604052809291908181526020016000905b8282101561081957838290600052602060002090600602016040518060c00160405290816000820180546105af906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906119e8565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b50505050508152602001600182018054610641906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461066d906119e8565b80156106ba5780601f1061068f576101008083540402835291602001916106ba565b820191906000526020600020905b81548152906001019060200180831161069d57829003601f168201915b505050505081526020016002820180546106d3906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546106ff906119e8565b801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b50505050508152602001600382018054610765906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610791906119e8565b80156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b505050918352505060048201546020808301919091526005909201546001600160a01b0316604090910152908252600192909201910161057c565b50505050905090565b6002818154811061083257600080fd5b9060005260206000209060060201600091509050806000018054610855906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906119e8565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050908060010180546108e3906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461090f906119e8565b801561095c5780601f106109315761010080835404028352916020019161095c565b820191906000526020600020905b81548152906001019060200180831161093f57829003601f168201915b505050505090806002018054610971906119e8565b80601f016020809104026020016040519081016040528092919081815260200182805461099d906119e8565b80156109ea5780601f106109bf576101008083540402835291602001916109ea565b820191906000526020600020905b8154815290600101906020018083116109cd57829003601f168201915b5050505050908060030180546109ff906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2b906119e8565b8015610a785780601f10610a4d57610100808354040283529160200191610a78565b820191906000526020600020905b815481529060010190602001808311610a5b57829003601f168201915b5050505060048301546005909301549192916001600160a01b0316905086565b6000546001600160a01b03163314610ac357604051635fc483c560e01b815260040160405180910390fd5b47600003610ae45760405163356680b760e01b815260040160405180910390fd5b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610b31576040519150601f19603f3d011682016040523d82523d6000602084013e610b36565b606091505b5050905080610b7e5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610217565b50565b6002548110610bc357604051630aec738560e11b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610217565b600060028281548110610bd857610bd86119d2565b90600052602060002090600602016040518060c0016040529081600082018054610c01906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2d906119e8565b8015610c7a5780601f10610c4f57610100808354040283529160200191610c7a565b820191906000526020600020905b815481529060010190602001808311610c5d57829003601f168201915b50505050508152602001600182018054610c93906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbf906119e8565b8015610d0c5780601f10610ce157610100808354040283529160200191610d0c565b820191906000526020600020905b815481529060010190602001808311610cef57829003601f168201915b50505050508152602001600282018054610d25906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d51906119e8565b8015610d9e5780601f10610d7357610100808354040283529160200191610d9e565b820191906000526020600020905b815481529060010190602001808311610d8157829003601f168201915b50505050508152602001600382018054610db7906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610de3906119e8565b8015610e305780601f10610e0557610100808354040283529160200191610e30565b820191906000526020600020905b815481529060010190602001808311610e1357829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0390811660409092019190915260a0820151919250163314801590610e7f57506000546001600160a01b03163314155b15610ec557604051630aec738560e11b815260206004820152601560248201527413dc195c985d1a5bdb881b9bdd08185b1b1bddd959605a1b6044820152606401610217565b600060028381548110610eda57610eda6119d2565b90600052602060002090600602016040518060c0016040529081600082018054610f03906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2f906119e8565b8015610f7c5780601f10610f5157610100808354040283529160200191610f7c565b820191906000526020600020905b815481529060010190602001808311610f5f57829003601f168201915b50505050508152602001600182018054610f95906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc1906119e8565b801561100e5780601f10610fe35761010080835404028352916020019161100e565b820191906000526020600020905b815481529060010190602001808311610ff157829003601f168201915b50505050508152602001600282018054611027906119e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611053906119e8565b80156110a05780601f10611075576101008083540402835291602001916110a0565b820191906000526020600020905b81548152906001019060200180831161108357829003601f168201915b505050505081526020016003820180546110b9906119e8565b80601f01602080910402602001604051908101604052809291908181526020018280546110e5906119e8565b80156111325780601f1061110757610100808354040283529160200191611132565b820191906000526020600020905b81548152906001019060200180831161111557829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0316604090910152600280549192509061116d90600190611b31565b8154811061117d5761117d6119d2565b90600052602060002090600602016002848154811061119e5761119e6119d2565b60009182526020909120600690910201806111b98382611b58565b506001818101906111cc90840182611b58565b506002818101906111df90840182611b58565b506003818101906111f290840182611b58565b5060048281015490820155600591820154910180546001600160a01b0319166001600160a01b039092169190911790556002805482919061123590600190611b31565b81548110611245576112456119d2565b6000918252602090912082516006909202019081906112649082611a71565b50602082015160018201906112799082611a71565b506040820151600282019061128e9082611a71565b50606082015160038201906112a39082611a71565b506080820151600482015560a090910151600590910180546001600160a01b0319166001600160a01b0390921691909117905560028054806112e7576112e7611c33565b6000828152602081206000199092019160068302019061130782826115fd565b6113156001830160006115fd565b6113236002830160006115fd565b6113316003830160006115fd565b506000600482015560050180546001600160a01b03191690559055505050565b6001543410156113745760405163356680b760e01b815260040160405180910390fd5b60405134815233907f51af70828e001e43c03fdaeaa7b0566d85d6ca32cbe6dbb863e517af913c80ff9060200160405180910390a2841580156113b5575080155b1561141157604051630aec738560e11b815260206004820152602560248201527f496e76616c69642067616d654d61737465724e616d65206f7220646573637269604482015264383a34b7b760d91b6064820152608401610217565b6040805160e06020601f8b01819004028201810190925260c081018981526002928291908c908c9081908501838280828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092019190915250505090825250604080516020601f8701819004810282018101909252858152918101919086908690819084018382808284376000920182905250938552505042602080850191909152336040909401939093525083546001810185559381522081519192600602019081906115379082611a71565b506020820151600182019061154c9082611a71565b50604082015160028201906115619082611a71565b50606082015160038201906115769082611a71565b506080820151600482015560a090910151600590910180546001600160a01b0319166001600160a01b0390921691909117905560405133907fdc5d3ce31adddd945bbdcce5d8623f0a925872c51fbba0957a3721a21d5f4e69906115eb9042908c908c908c908c908c908c908c908c90611c72565b60405180910390a25050505050505050565b508054611609906119e8565b6000825580601f10611619575050565b601f016020900490600052602060002090810190610b7e91905b808211156116475760008155600101611633565b5090565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561167457600080fd5b82359150602083013567ffffffffffffffff8082111561169357600080fd5b818501915085601f8301126116a757600080fd5b8135818111156116b9576116b961164b565b604051601f8201601f19908116603f011681019083821181831017156116e1576116e161164b565b816040528281528860208487010111156116fa57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b8181101561174257602081850181015186830182015201611726565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561182d57603f19898403018552815160c081518186526117af8287018261171c565b915050888201518582038a8701526117c7828261171c565b91505087820151858203898701526117df828261171c565b915050606080830151868303828801526117f9838261171c565b6080858101519089015260a0948501516001600160a01b031694909701939093525050509386019390860190600101611789565b509098975050505050505050565b60006020828403121561184d57600080fd5b5035919050565b60c08152600061186760c083018961171c565b8281036020840152611879818961171c565b9050828103604084015261188d818861171c565b905082810360608401526118a1818761171c565b608084019590955250506001600160a01b039190911660a090910152949350505050565b60008083601f8401126118d757600080fd5b50813567ffffffffffffffff8111156118ef57600080fd5b60208301915083602082850101111561190757600080fd5b9250929050565b6000806000806000806000806080898b03121561192a57600080fd5b883567ffffffffffffffff8082111561194257600080fd5b61194e8c838d016118c5565b909a50985060208b013591508082111561196757600080fd5b6119738c838d016118c5565b909850965060408b013591508082111561198c57600080fd5b6119988c838d016118c5565b909650945060608b01359150808211156119b157600080fd5b506119be8b828c016118c5565b999c989b5096995094979396929594505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806119fc57607f821691505b602082108103611a1c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611a6c57600081815260208120601f850160051c81016020861015611a495750805b601f850160051c820191505b81811015611a6857828155600101611a55565b5050505b505050565b815167ffffffffffffffff811115611a8b57611a8b61164b565b611a9f81611a9984546119e8565b84611a22565b602080601f831160018114611ad45760008415611abc5750858301515b600019600386901b1c1916600185901b178555611a68565b600085815260208120601f198616915b82811015611b0357888601518255948401946001909101908401611ae4565b5085821015611b215787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115611b5257634e487b7160e01b600052601160045260246000fd5b92915050565b818103611b63575050565b611b6d82546119e8565b67ffffffffffffffff811115611b8557611b8561164b565b611b9381611a9984546119e8565b6000601f821160018114611bc75760008315611baf5750848201545b600019600385901b1c1916600184901b178455611c2c565b600085815260209020601f19841690600086815260209020845b83811015611c015782860154825560019586019590910190602001611be1565b5085831015611c1f5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260a060208201526000611c8c60a083018a8c611c49565b8281036040840152611c9f81898b611c49565b90508281036060840152611cb4818789611c49565b90508281036080840152611cc9818587611c49565b9c9b50505050505050505050505056fea264697066735822122054b943bc5ad0029cb0793d678dabef90b9d17186529191149e58b50633802a8c64736f6c63430008140033",
  "devdoc": {
    "details": "BuyMeACeptorWorld contract to accept donations and for our users to create a world for us",
    "kind": "dev",
    "methods": {
      "buyWorld(string,string,string,string)": {
        "details": "Function to buy a world",
        "params": {
          "description": "The description of the world (Note: Using calldata for gas efficiency)",
          "gameMasterName": "The name of the game master",
          "gameMasterTwitterHandle": "The Twitter handle of the game master"
        }
      },
      "getWorlds()": {
        "details": "Function to get the worlds"
      },
      "modifyWorldDescription(uint256,string)": {
        "details": "Function to modify a world description",
        "params": {
          "description": "The description of the world",
          "index": "The index of the world"
        }
      },
      "removeWorld(uint256)": {
        "details": "Function to remove a world",
        "params": {
          "index": "The index of the world"
        }
      },
      "withdrawTips()": {
        "details": "Function to withdraw the balance"
      }
    },
    "title": "BuyMeACeptorWorld",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3815,
        "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 3817,
        "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3821,
        "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
        "label": "worlds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(World)3812_storage)dyn_storage"
      },
      {
        "astId": 3824,
        "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
        "label": "gamesToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GamesToken)5551"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(World)3812_storage)dyn_storage": {
        "base": "t_struct(World)3812_storage",
        "encoding": "dynamic_array",
        "label": "struct World[]",
        "numberOfBytes": "32"
      },
      "t_contract(GamesToken)5551": {
        "encoding": "inplace",
        "label": "contract GamesToken",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(World)3812_storage": {
        "encoding": "inplace",
        "label": "struct World",
        "members": [
          {
            "astId": 3801,
            "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
            "label": "vibe",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3803,
            "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
            "label": "gameMasterName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3805,
            "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
            "label": "gameMasterTwitterHandle",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3807,
            "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3809,
            "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
            "label": "time",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3811,
            "contract": "contracts/BuyMeACeptor.sol:BuyMeACeptor",
            "label": "gameMasterAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}