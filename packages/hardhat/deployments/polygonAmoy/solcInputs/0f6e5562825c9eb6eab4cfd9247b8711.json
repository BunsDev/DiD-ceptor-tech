{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/GamesDAOv3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Games Token deployed on Polygon Amoy\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @title GamesDAO\n * @dev Manages the minting and pricing of GamesToken based on Chainlink price feeds. \n * Allows for gamemaster proposals on token pricing, updating a catchphrase, decentralized withdrawl, players and gamemasters voting.\n * Chainlink Block Magic Hackathon for Ceptor Games Team by Tippi Fifestarr.\n */\ninterface TokenInterface {\n    function mint(address account, uint256 amount) external;\n}\n\ncontract GamesDAOv3 is AccessControl {\n    // Native Network PAIR\n    AggregatorV3Interface internal priceFeed;\n    TokenInterface public minter;\n    uint256 public gamesTokenPriceInCents = 2; // 1 token = 0.02 USD\n    address public immutable owner;\n    string public greeting = \"Hooty, world!\";\n\n    bytes32 public constant GAMEMASTER_ROLE = keccak256(\"GAMEMASTER_ROLE\");\n    bytes32 public constant PLAYER_ROLE = keccak256(\"PLAYER_ROLE\");\n    uint256 public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** 18;\n    // mapping(address => bool) public allowedPlayers; // using the oz access control roles instead\n\n    enum ProposalType {CHANGE_PRICE, SEND_FUNDS, UPDATE_CATCHPHRASE}\n\n    struct Proposal {\n        ProposalType proposalType;\n        string catchphrase;\n        uint256 newPrice;\n        uint256 amount;\n        address to;\n        uint256 votesFor;\n        uint256 votesAgainst;\n        uint256 deadline;\n        bool executed;\n        mapping(address => bool) voters;\n    }\n\n    struct Player {\n        string catchphrase;\n    }\n\n    struct Gamemaster {\n        string catchphrase;\n        string stylePrompt;\n    }\n\n    mapping(address => Player) public players;\n    mapping(address => Gamemaster) public gamemasters;\n    Proposal public proposal;\n\n    event PlayerAllowed(address indexed player);\n    event GamemasterAdded(address indexed gamemaster);\n    event ProposalCreated(uint256 newPrice, uint256 amount, address to, string catchphrase, uint256 deadline, ProposalType proposalType);\n    event Voted(address indexed voter, bool voteFor);\n    event ProposalExecuted(uint256 newPrice, uint256 amount, address to, string catchphrase, ProposalType proposalType);\n    event PlayerCatchphraseUpdated(address indexed player, string catchphrase);\n    event GamemasterCatchphraseUpdated(address indexed gamemaster, string catchphrase);\n    event GamemasterStylePromptUpdated(address indexed gamemaster, string stylePrompt);\n\n    /**\n     * @dev Sets the owner, roles and initializes the MATIC/USD price feed on the Polygon Amoy Testnet.\n     */\n    constructor(address aggregator) {\n        priceFeed = AggregatorV3Interface(aggregator);\n        owner = msg.sender;\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\n        _grantRole(GAMEMASTER_ROLE, owner);\n        _grantRole(PLAYER_ROLE, owner);\n    }\n\n    /**\n     * @dev Ensures only the owner can call the modified function.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    /**\n     * @dev Ensures only allowed players or gamemasters can call the modified function.\n     */\n    modifier onlyAllowed() {\n        require(\n            hasRole(PLAYER_ROLE, msg.sender) || hasRole(GAMEMASTER_ROLE, msg.sender),\n            \"Not allowed\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Sets the token contract address for minting.\n     * @param tokenAddress The address of the token contract.\n     */\n    function setTokenAddress(address tokenAddress) external onlyOwner {\n        minter = TokenInterface(tokenAddress);\n    }\n\n    /**\n     * @notice Retrieves the latest price of MATIC in USD from the Chainlink data feed.\n     * @return price The latest MATIC price in USD.\n     */\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        (, int price,,,) = priceFeed.latestRoundData();\n        return price; // example returned amount 69050000 = $0.69 USD for 1 Matic\n    }\n\n    /**\n    * @notice Calculates the amount of MATIC required to buy one GamesToken.\n     * @return gamesTokenPriceInWei The amount of MATIC (18 decimals) needed for one GamesToken.\n     */\n    function getMATICForOneGT() public view returns (uint256) {\n        int price = getChainlinkDataFeedLatestAnswer(); // value of 1 MATIC (1 ) is 0.69 USD (8 decimals) = 69050000\n\n        // Convert the price to uint256\n        uint256 priceInCents = uint256(price) / 10 ** 6; // Convert from 8 decimals to cents (e.g., 69050000 -> 69)\n\n        // Calculate the amount of MATIC needed for one GamesToken in wei\n        uint256 gamesTokenPriceWei = (gamesTokenPriceInCents * 10 ** 18) / priceInCents;\n\n        return gamesTokenPriceWei;\n    }\n\n    /**\n     * @notice Calculates the total MATIC required for a given number of GamesTokens.\n     * @param numberOfGTs The number of GamesTokens to buy.\n     * @return howMuchMatic The total amount of MATIC needed for the specified number of GamesTokens.\n     */\n    function getMATICForGTs(uint256 numberOfGTs) public view returns (uint256) {\n        return getMATICForOneGT() * numberOfGTs;\n    }\n\n    /**\n     * @notice Allows players to buy a specified number of GamesTokens.\n     * @param numberOfGTs The number of GamesTokens to buy.\n     */\n    function buyAmountTokens(uint256 numberOfGTs) public payable onlyAllowed {\n        uint256 requiredMATIC = getMATICForGTs(numberOfGTs);\n        require(msg.value >= requiredMATIC, \"Insufficient MATIC sent\");\n        minter.mint(msg.sender, numberOfGTs * TOKEN_DECIMAL_MULTIPLIER);\n    }\n\n    /**\n     * @notice Allows players to buy GamesTokens based on the amount of MATIC sent.\n     */\n    function buyTokens() public payable onlyAllowed {\n        require(msg.value > 0, \"No MATIC sent\");\n        uint256 numberOfGTs = (msg.value) / getMATICForOneGT();\n        minter.mint(msg.sender, numberOfGTs * TOKEN_DECIMAL_MULTIPLIER);\n    }\n\n    /**\n     * @notice Allows the owner to withdraw the contract balance.\n     */\n    function withdraw() external onlyOwner {\n        payable(owner).transfer(address(this).balance);\n    }\n\n    /**\n  * @notice Allows the owner to permit a player to participate.\n * @param player The address of the player to be allowed.\n */\n    function allowPlayer(address player) external onlyOwner {\n        grantRole(PLAYER_ROLE, player);\n        emit PlayerAllowed(player);\n    }\n\n    /**\n     * @notice Allows the owner to designate a gamemaster.\n     * @param gamemaster The address of the gamemaster to be added.\n     */\n    function addGamemaster(address gamemaster) external onlyOwner {\n        grantRole(GAMEMASTER_ROLE, gamemaster);\n        emit GamemasterAdded(gamemaster);\n    }\n\n    /**\n * @notice Creates a proposal for various actions like changing token price, updating catchphrase, or sending funds.\n * @param proposalType The type of proposal.\n * @param newPrice The new price for the token in cents (for CHANGE_PRICE).\n * @param amount The amount of funds to send (for SEND_FUNDS).\n * @param catchphrase The new catchphrase (for UPDATE_CATCHPHRASE).\n */\n    function createProposal(ProposalType proposalType, uint256 newPrice, uint256 amount, address to, string calldata catchphrase) external onlyAllowed {\n        require(proposal.deadline == 0 || block.timestamp > proposal.deadline, \"Previous proposal still active\");\n\n        proposal.proposalType = proposalType;\n        proposal.newPrice = newPrice;\n        proposal.amount = amount;\n        proposal.to = to;\n        proposal.catchphrase = catchphrase;\n        proposal.votesFor = 0;\n        proposal.votesAgainst = 0;\n        proposal.deadline = block.timestamp + 1 hours;\n        proposal.executed = false;\n\n        emit ProposalCreated(newPrice, amount, to, catchphrase, proposal.deadline, proposalType);\n\n    }\n\n    /**\n     * @notice Allows allowed users to vote on the active proposal.\n     * @param voteFor True to vote in favor, false to vote against.\n     */\n    function vote(bool voteFor) external onlyAllowed {\n        require(block.timestamp <= proposal.deadline, \"Voting period has ended\");\n        require(!proposal.voters[msg.sender], \"Already voted\");\n        proposal.voters[msg.sender] = true;\n        if (voteFor) {\n            proposal.votesFor += 1;\n        } else {\n            proposal.votesAgainst += 1;\n        }\n        emit Voted(msg.sender, voteFor);\n    }\n\n    /**\n  * @notice Executes the proposal if voting is complete and conditions are met.\n */\n    function executeProposal() external onlyAllowed {\n        require(block.timestamp > proposal.deadline, \"Voting period not ended yet\");\n        require(!proposal.executed, \"Proposal already executed\");\n        require(proposal.votesFor > proposal.votesAgainst, \"Proposal not approved\");\n\n        if (proposal.proposalType == ProposalType.CHANGE_PRICE) {\n            gamesTokenPriceInCents = proposal.newPrice;\n        } else if (proposal.proposalType == ProposalType.SEND_FUNDS) {\n            require(address(this).balance >= proposal.amount, \"Insufficient balance\");\n            payable(proposal.to).transfer(proposal.amount);\n        } else if (proposal.proposalType == ProposalType.UPDATE_CATCHPHRASE) {\n            greeting = proposal.catchphrase;\n        }\n\n        proposal.executed = true;\n        proposal.deadline = 0;\n\n        emit ProposalExecuted(proposal.newPrice, proposal.amount, proposal.to, proposal.catchphrase, proposal.proposalType);\n    }\n\n/**\n * @notice Allows a player to update their catchphrase.\n * @param catchphrase The new catchphrase for the player.\n */\n    function updatePlayerCatchphrase(string calldata catchphrase) external onlyRole(PLAYER_ROLE) {\n        players[msg.sender].catchphrase = catchphrase;\n        emit PlayerCatchphraseUpdated(msg.sender, catchphrase);\n    }\n\n/**\n * @notice Allows a gamemaster to update their catchphrase.\n * @param catchphrase The new catchphrase for the gamemaster.\n */\n    function updateGamemasterCatchphrase(string calldata catchphrase) external onlyRole(GAMEMASTER_ROLE) {\n        gamemasters[msg.sender].catchphrase = catchphrase;\n        emit GamemasterCatchphraseUpdated(msg.sender, catchphrase);\n    }\n\n/**\n * @notice Allows a gamemaster to update their style prompt.\n * @param stylePrompt The new style prompt for the gamemaster.\n */\n    function updateGamemasterStylePrompt(string calldata stylePrompt) external onlyRole(GAMEMASTER_ROLE) {\n        gamemasters[msg.sender].stylePrompt = stylePrompt;\n        emit GamemasterStylePromptUpdated(msg.sender, stylePrompt);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}