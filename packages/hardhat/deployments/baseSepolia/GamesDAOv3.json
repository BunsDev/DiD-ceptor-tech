{
  "address": "0x9b8175cFe117946253596d5cb9C62AaC1A8bAa94",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamemaster",
          "type": "address"
        }
      ],
      "name": "GamemasterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamemaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        }
      ],
      "name": "GamemasterCatchphraseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamemaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "stylePrompt",
          "type": "string"
        }
      ],
      "name": "GamemasterStylePromptUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        }
      ],
      "name": "PlayerCatchphraseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GamesDAOv3.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum GamesDAOv3.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "voteFor",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMEMASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_DECIMAL_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gamemaster",
          "type": "address"
        }
      ],
      "name": "addGamemaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "allowPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfGTs",
          "type": "uint256"
        }
      ],
      "name": "buyAmountTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum GamesDAOv3.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gamemasters",
      "outputs": [
        {
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "stylePrompt",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesTokenPriceInCents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkDataFeedLatestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfGTs",
          "type": "uint256"
        }
      ],
      "name": "getMATICForGTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMATICForOneGT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "greeting",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposal",
      "outputs": [
        {
          "internalType": "enum GamesDAOv3.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        }
      ],
      "name": "updateGamemasterCatchphrase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stylePrompt",
          "type": "string"
        }
      ],
      "name": "updateGamemasterStylePrompt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "catchphrase",
          "type": "string"
        }
      ],
      "name": "updatePlayerCatchphrase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "voteFor",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a5261068576661089fda032917f404ff8a79dab1c49382ea6ab0e0873c261d2",
  "receipt": {
    "to": null,
    "from": "0xD10F43A0aa00D244DAcFBE3C49b9B918B717Ff2c",
    "contractAddress": "0x9b8175cFe117946253596d5cb9C62AaC1A8bAa94",
    "transactionIndex": 6,
    "gasUsed": "1974409",
    "logsBloom": "0x
    "blockHash": "0xa71fe4b67f63226c7d7e3513d1c0f456f07672931e16a60b2a4bcd25b036d926",
    "transactionHash": "0x6a5261068576661089fda032917f404ff8a79dab1c49382ea6ab0e0873c261d2",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10842681,
        "transactionHash": "0x6a5261068576661089fda032917f404ff8a79dab1c49382ea6ab0e0873c261d2",
        "address": "0x9b8175cFe117946253596d5cb9C62AaC1A8bAa94",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d10f43a0aa00d244dacfbe3c49b9b918b717ff2c",
          "0x000000000000000000000000d10f43a0aa00d244dacfbe3c49b9b918b717ff2c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa71fe4b67f63226c7d7e3513d1c0f456f07672931e16a60b2a4bcd25b036d926"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10842681,
        "transactionHash": "0x6a5261068576661089fda032917f404ff8a79dab1c49382ea6ab0e0873c261d2",
        "address": "0x9b8175cFe117946253596d5cb9C62AaC1A8bAa94",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8c6864d14af7e836c07afb1da9d476ebdc26933212c2a9bb10236988c4a3a46f",
          "0x000000000000000000000000d10f43a0aa00d244dacfbe3c49b9b918b717ff2c",
          "0x000000000000000000000000d10f43a0aa00d244dacfbe3c49b9b918b717ff2c"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xa71fe4b67f63226c7d7e3513d1c0f456f07672931e16a60b2a4bcd25b036d926"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10842681,
        "transactionHash": "0x6a5261068576661089fda032917f404ff8a79dab1c49382ea6ab0e0873c261d2",
        "address": "0x9b8175cFe117946253596d5cb9C62AaC1A8bAa94",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xce04d177cfe9f73a7157bda35b0add7251966ad70509ceaef76ad7d5e6c45042",
          "0x000000000000000000000000d10f43a0aa00d244dacfbe3c49b9b918b717ff2c",
          "0x000000000000000000000000d10f43a0aa00d244dacfbe3c49b9b918b717ff2c"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xa71fe4b67f63226c7d7e3513d1c0f456f07672931e16a60b2a4bcd25b036d926"
      }
    ],
    "blockNumber": 10842681,
    "cumulativeGasUsed": "2256712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1"
  ],
  "numDeployments": 2,
  "solcInputHash": "2e455416d4f892c09653c2704b95d83f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamemaster\",\"type\":\"address\"}],\"name\":\"GamemasterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamemaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"}],\"name\":\"GamemasterCatchphraseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamemaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"stylePrompt\",\"type\":\"string\"}],\"name\":\"GamemasterStylePromptUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"}],\"name\":\"PlayerCatchphraseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GamesDAOv3.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum GamesDAOv3.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMEMASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMAL_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gamemaster\",\"type\":\"address\"}],\"name\":\"addGamemaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"allowPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfGTs\",\"type\":\"uint256\"}],\"name\":\"buyAmountTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GamesDAOv3.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gamemasters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stylePrompt\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesTokenPriceInCents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkDataFeedLatestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfGTs\",\"type\":\"uint256\"}],\"name\":\"getMATICForGTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMATICForOneGT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greeting\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"enum GamesDAOv3.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"}],\"name\":\"updateGamemasterCatchphrase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stylePrompt\",\"type\":\"string\"}],\"name\":\"updateGamemasterStylePrompt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"catchphrase\",\"type\":\"string\"}],\"name\":\"updatePlayerCatchphrase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addGamemaster(address)\":{\"params\":{\"gamemaster\":\"The address of the gamemaster to be added.\"}},\"allowPlayer(address)\":{\"params\":{\"player\":\"The address of the player to be allowed.\"}},\"buyAmountTokens(uint256)\":{\"params\":{\"numberOfGTs\":\"The number of GamesTokens to buy.\"}},\"constructor\":{\"details\":\"Sets the owner, roles and initializes the MATIC/USD price feed on the Polygon Amoy Testnet.\"},\"createProposal(uint8,uint256,uint256,address,string)\":{\"params\":{\"amount\":\"The amount of funds to send (for SEND_FUNDS).\",\"catchphrase\":\"The new catchphrase (for UPDATE_CATCHPHRASE).\",\"newPrice\":\"The new price for the token in cents (for CHANGE_PRICE).\",\"proposalType\":\"The type of proposal.\"}},\"getChainlinkDataFeedLatestAnswer()\":{\"returns\":{\"_0\":\"price The latest MATIC price in USD.\"}},\"getMATICForGTs(uint256)\":{\"params\":{\"numberOfGTs\":\"The number of GamesTokens to buy.\"},\"returns\":{\"_0\":\"howMuchMatic The total amount of MATIC needed for the specified number of GamesTokens.\"}},\"getMATICForOneGT()\":{\"returns\":{\"_0\":\"gamesTokenPriceInWei The amount of MATIC (18 decimals) needed for one GamesToken.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setTokenAddress(address)\":{\"params\":{\"tokenAddress\":\"The address of the token contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateGamemasterCatchphrase(string)\":{\"params\":{\"catchphrase\":\"The new catchphrase for the gamemaster.\"}},\"updateGamemasterStylePrompt(string)\":{\"params\":{\"stylePrompt\":\"The new style prompt for the gamemaster.\"}},\"updatePlayerCatchphrase(string)\":{\"params\":{\"catchphrase\":\"The new catchphrase for the player.\"}},\"vote(bool)\":{\"params\":{\"voteFor\":\"True to vote in favor, false to vote against.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGamemaster(address)\":{\"notice\":\"Allows the owner to designate a gamemaster.\"},\"allowPlayer(address)\":{\"notice\":\"Allows the owner to permit a player to participate.\"},\"buyAmountTokens(uint256)\":{\"notice\":\"Allows players to buy a specified number of GamesTokens.\"},\"buyTokens()\":{\"notice\":\"Allows players to buy GamesTokens based on the amount of MATIC sent.\"},\"createProposal(uint8,uint256,uint256,address,string)\":{\"notice\":\"Creates a proposal for various actions like changing token price, updating catchphrase, or sending funds.\"},\"executeProposal()\":{\"notice\":\"Executes the proposal if voting is complete and conditions are met.\"},\"getChainlinkDataFeedLatestAnswer()\":{\"notice\":\"Retrieves the latest price of MATIC in USD from the Chainlink data feed.\"},\"getMATICForGTs(uint256)\":{\"notice\":\"Calculates the total MATIC required for a given number of GamesTokens.\"},\"getMATICForOneGT()\":{\"notice\":\"Calculates the amount of MATIC required to buy one GamesToken.\"},\"setTokenAddress(address)\":{\"notice\":\"Sets the token contract address for minting.\"},\"updateGamemasterCatchphrase(string)\":{\"notice\":\"Allows a gamemaster to update their catchphrase.\"},\"updateGamemasterStylePrompt(string)\":{\"notice\":\"Allows a gamemaster to update their style prompt.\"},\"updatePlayerCatchphrase(string)\":{\"notice\":\"Allows a player to update their catchphrase.\"},\"vote(bool)\":{\"notice\":\"Allows allowed users to vote on the active proposal.\"},\"withdraw()\":{\"notice\":\"Allows the owner to withdraw the contract balance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GamesDAOv3.sol\":\"GamesDAOv3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/GamesDAOv3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Games Token deployed on Polygon Amoy\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title GamesDAO\\n * @dev Manages the minting and pricing of GamesToken based on Chainlink price feeds. \\n * Allows for gamemaster proposals on token pricing, updating a catchphrase, decentralized withdrawl, players and gamemasters voting.\\n * Chainlink Block Magic Hackathon for Ceptor Games Team by Tippi Fifestarr.\\n */\\ninterface TokenInterface {\\n    function mint(address account, uint256 amount) external;\\n}\\n\\ncontract GamesDAOv3 is AccessControl {\\n    // Native Network PAIR\\n    AggregatorV3Interface internal priceFeed;\\n    TokenInterface public minter;\\n    uint256 public gamesTokenPriceInCents = 2; // 1 token = 0.02 USD\\n    address public immutable owner;\\n    string public greeting = \\\"Hooty, world!\\\";\\n\\n    bytes32 public constant GAMEMASTER_ROLE = keccak256(\\\"GAMEMASTER_ROLE\\\");\\n    bytes32 public constant PLAYER_ROLE = keccak256(\\\"PLAYER_ROLE\\\");\\n    uint256 public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** 18;\\n    // mapping(address => bool) public allowedPlayers; // using the oz access control roles instead\\n\\n    enum ProposalType {CHANGE_PRICE, SEND_FUNDS, UPDATE_CATCHPHRASE}\\n\\n    struct Proposal {\\n        ProposalType proposalType;\\n        string catchphrase;\\n        uint256 newPrice;\\n        uint256 amount;\\n        address to;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 deadline;\\n        bool executed;\\n        mapping(address => bool) voters;\\n    }\\n\\n    struct Player {\\n        string catchphrase;\\n    }\\n\\n    struct Gamemaster {\\n        string catchphrase;\\n        string stylePrompt;\\n    }\\n\\n    mapping(address => Player) public players;\\n    mapping(address => Gamemaster) public gamemasters;\\n    Proposal public proposal;\\n\\n    event PlayerAllowed(address indexed player);\\n    event GamemasterAdded(address indexed gamemaster);\\n    event ProposalCreated(uint256 newPrice, uint256 amount, address to, string catchphrase, uint256 deadline, ProposalType proposalType);\\n    event Voted(address indexed voter, bool voteFor);\\n    event ProposalExecuted(uint256 newPrice, uint256 amount, address to, string catchphrase, ProposalType proposalType);\\n    event PlayerCatchphraseUpdated(address indexed player, string catchphrase);\\n    event GamemasterCatchphraseUpdated(address indexed gamemaster, string catchphrase);\\n    event GamemasterStylePromptUpdated(address indexed gamemaster, string stylePrompt);\\n\\n    /**\\n     * @dev Sets the owner, roles and initializes the MATIC/USD price feed on the Polygon Amoy Testnet.\\n     */\\n    constructor(address aggregator) {\\n        priceFeed = AggregatorV3Interface(aggregator);\\n        owner = msg.sender;\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(GAMEMASTER_ROLE, owner);\\n        _grantRole(PLAYER_ROLE, owner);\\n    }\\n\\n    /**\\n     * @dev Ensures only the owner can call the modified function.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Ensures only allowed players or gamemasters can call the modified function.\\n     */\\n    modifier onlyAllowed() {\\n        require(\\n            hasRole(PLAYER_ROLE, msg.sender) || hasRole(GAMEMASTER_ROLE, msg.sender),\\n            \\\"Not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the token contract address for minting.\\n     * @param tokenAddress The address of the token contract.\\n     */\\n    function setTokenAddress(address tokenAddress) external onlyOwner {\\n        minter = TokenInterface(tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Retrieves the latest price of MATIC in USD from the Chainlink data feed.\\n     * @return price The latest MATIC price in USD.\\n     */\\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\\n        (, int price,,,) = priceFeed.latestRoundData();\\n        return price; // example returned amount 69050000 = $0.69 USD for 1 Matic\\n    }\\n\\n    /**\\n    * @notice Calculates the amount of MATIC required to buy one GamesToken.\\n     * @return gamesTokenPriceInWei The amount of MATIC (18 decimals) needed for one GamesToken.\\n     */\\n    function getMATICForOneGT() public view returns (uint256) {\\n        int price = getChainlinkDataFeedLatestAnswer(); // value of 1 MATIC (1 ) is 0.69 USD (8 decimals) = 69050000\\n\\n        // Convert the price to uint256\\n        uint256 priceInCents = uint256(price) / 10 ** 6; // Convert from 8 decimals to cents (e.g., 69050000 -> 69)\\n\\n        // Calculate the amount of MATIC needed for one GamesToken in wei\\n        uint256 gamesTokenPriceWei = (gamesTokenPriceInCents * 10 ** 18) / priceInCents;\\n\\n        return gamesTokenPriceWei;\\n    }\\n\\n    /**\\n     * @notice Calculates the total MATIC required for a given number of GamesTokens.\\n     * @param numberOfGTs The number of GamesTokens to buy.\\n     * @return howMuchMatic The total amount of MATIC needed for the specified number of GamesTokens.\\n     */\\n    function getMATICForGTs(uint256 numberOfGTs) public view returns (uint256) {\\n        return getMATICForOneGT() * numberOfGTs;\\n    }\\n\\n    /**\\n     * @notice Allows players to buy a specified number of GamesTokens.\\n     * @param numberOfGTs The number of GamesTokens to buy.\\n     */\\n    function buyAmountTokens(uint256 numberOfGTs) public payable onlyAllowed {\\n        uint256 requiredMATIC = getMATICForGTs(numberOfGTs);\\n        require(msg.value >= requiredMATIC, \\\"Insufficient MATIC sent\\\");\\n        minter.mint(msg.sender, numberOfGTs * TOKEN_DECIMAL_MULTIPLIER);\\n    }\\n\\n    /**\\n     * @notice Allows players to buy GamesTokens based on the amount of MATIC sent.\\n     */\\n    function buyTokens() public payable onlyAllowed {\\n        require(msg.value > 0, \\\"No MATIC sent\\\");\\n        uint256 numberOfGTs = (msg.value) / getMATICForOneGT();\\n        minter.mint(msg.sender, numberOfGTs * TOKEN_DECIMAL_MULTIPLIER);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to withdraw the contract balance.\\n     */\\n    function withdraw() external onlyOwner {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    /**\\n  * @notice Allows the owner to permit a player to participate.\\n * @param player The address of the player to be allowed.\\n */\\n    function allowPlayer(address player) external onlyOwner {\\n        grantRole(PLAYER_ROLE, player);\\n        emit PlayerAllowed(player);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to designate a gamemaster.\\n     * @param gamemaster The address of the gamemaster to be added.\\n     */\\n    function addGamemaster(address gamemaster) external onlyOwner {\\n        grantRole(GAMEMASTER_ROLE, gamemaster);\\n        emit GamemasterAdded(gamemaster);\\n    }\\n\\n    /**\\n * @notice Creates a proposal for various actions like changing token price, updating catchphrase, or sending funds.\\n * @param proposalType The type of proposal.\\n * @param newPrice The new price for the token in cents (for CHANGE_PRICE).\\n * @param amount The amount of funds to send (for SEND_FUNDS).\\n * @param catchphrase The new catchphrase (for UPDATE_CATCHPHRASE).\\n */\\n    function createProposal(ProposalType proposalType, uint256 newPrice, uint256 amount, address to, string calldata catchphrase) external onlyAllowed {\\n        require(proposal.deadline == 0 || block.timestamp > proposal.deadline, \\\"Previous proposal still active\\\");\\n\\n        proposal.proposalType = proposalType;\\n        proposal.newPrice = newPrice;\\n        proposal.amount = amount;\\n        proposal.to = to;\\n        proposal.catchphrase = catchphrase;\\n        proposal.votesFor = 0;\\n        proposal.votesAgainst = 0;\\n        proposal.deadline = block.timestamp + 1 hours;\\n        proposal.executed = false;\\n\\n        emit ProposalCreated(newPrice, amount, to, catchphrase, proposal.deadline, proposalType);\\n\\n    }\\n\\n    /**\\n     * @notice Allows allowed users to vote on the active proposal.\\n     * @param voteFor True to vote in favor, false to vote against.\\n     */\\n    function vote(bool voteFor) external onlyAllowed {\\n        require(block.timestamp <= proposal.deadline, \\\"Voting period has ended\\\");\\n        require(!proposal.voters[msg.sender], \\\"Already voted\\\");\\n        proposal.voters[msg.sender] = true;\\n        if (voteFor) {\\n            proposal.votesFor += 1;\\n        } else {\\n            proposal.votesAgainst += 1;\\n        }\\n        emit Voted(msg.sender, voteFor);\\n    }\\n\\n    /**\\n  * @notice Executes the proposal if voting is complete and conditions are met.\\n */\\n    function executeProposal() external onlyAllowed {\\n        require(block.timestamp > proposal.deadline, \\\"Voting period not ended yet\\\");\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n        require(proposal.votesFor > proposal.votesAgainst, \\\"Proposal not approved\\\");\\n\\n        if (proposal.proposalType == ProposalType.CHANGE_PRICE) {\\n            gamesTokenPriceInCents = proposal.newPrice;\\n        } else if (proposal.proposalType == ProposalType.SEND_FUNDS) {\\n            require(address(this).balance >= proposal.amount, \\\"Insufficient balance\\\");\\n            payable(proposal.to).transfer(proposal.amount);\\n        } else if (proposal.proposalType == ProposalType.UPDATE_CATCHPHRASE) {\\n            greeting = proposal.catchphrase;\\n        }\\n\\n        proposal.executed = true;\\n        proposal.deadline = 0;\\n\\n        emit ProposalExecuted(proposal.newPrice, proposal.amount, proposal.to, proposal.catchphrase, proposal.proposalType);\\n    }\\n\\n/**\\n * @notice Allows a player to update their catchphrase.\\n * @param catchphrase The new catchphrase for the player.\\n */\\n    function updatePlayerCatchphrase(string calldata catchphrase) external onlyRole(PLAYER_ROLE) {\\n        players[msg.sender].catchphrase = catchphrase;\\n        emit PlayerCatchphraseUpdated(msg.sender, catchphrase);\\n    }\\n\\n/**\\n * @notice Allows a gamemaster to update their catchphrase.\\n * @param catchphrase The new catchphrase for the gamemaster.\\n */\\n    function updateGamemasterCatchphrase(string calldata catchphrase) external onlyRole(GAMEMASTER_ROLE) {\\n        gamemasters[msg.sender].catchphrase = catchphrase;\\n        emit GamemasterCatchphraseUpdated(msg.sender, catchphrase);\\n    }\\n\\n/**\\n * @notice Allows a gamemaster to update their style prompt.\\n * @param stylePrompt The new style prompt for the gamemaster.\\n */\\n    function updateGamemasterStylePrompt(string calldata stylePrompt) external onlyRole(GAMEMASTER_ROLE) {\\n        gamemasters[msg.sender].stylePrompt = stylePrompt;\\n        emit GamemasterStylePromptUpdated(msg.sender, stylePrompt);\\n    }\\n}\",\"keccak256\":\"0xa32c6b6c1e6dbfbe47ecf4ba6b70828a3cd606cdacb3c1ba51926041f67e49a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600260035560e0604052600d60a09081526c486f6f74792c20776f726c642160981b60c05260049062000033908262000259565b503480156200004157600080fd5b506040516200239538038062002395833981016040819052620000649162000325565b600180546001600160a01b0319166001600160a01b038316179055336080819052620000939060009062000105565b50620000c87f8c6864d14af7e836c07afb1da9d476ebdc26933212c2a9bb10236988c4a3a46f6080516200010560201b60201c565b50620000fd7fce04d177cfe9f73a7157bda35b0add7251966ad70509ceaef76ad7d5e6c450426080516200010560201b60201c565b505062000357565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16620001aa576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001613390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001620001ae565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001df57607f821691505b6020821081036200020057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025457600081815260208120601f850160051c810160208610156200022f5750805b601f850160051c820191505b8181101562000250578281556001016200023b565b5050505b505050565b81516001600160401b03811115620002755762000275620001b4565b6200028d81620002868454620001ca565b8462000206565b602080601f831160018114620002c55760008415620002ac5750858301515b600019600386901b1c1916600185901b17855562000250565b600085815260208120601f198616915b82811015620002f657888601518255948401946001909101908401620002d5565b5085821015620003155787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200033857600080fd5b81516001600160a01b03811681146200035057600080fd5b9392505050565b608051611fff62000396600039600081816104690152818161083b01528181610bb501528181610bff015281816112fd01526113940152611fff6000f3fe6080604052600436106101e35760003560e01c8063872190a311610102578063bea4dfb511610095578063d4b4993511610064578063d4b4993514610585578063d547741f1461059b578063e2eb41ff146105bb578063ef690cc0146105e857600080fd5b8063bea4dfb514610528578063c93d40df1461053d578063ce5ac8961461055d578063d0febe4c1461057d57600080fd5b806392992d25116100d157806392992d25146104be5780639ad665d9146104d3578063a217fddf146104f3578063b5e4668f1461050857600080fd5b8063872190a3146104295780638da5cb5b146104575780638f14e5fc1461048b57806391d148541461049e57600080fd5b806334c240af1161017a5780634b9f5c98116101495780634b9f5c98146103a357806356780085146103c3578063753ec103146103df57806383101e831461040957600080fd5b806334c240af1461033757806336568abe14610359578063373058b8146103795780633ccfd60b1461038e57600080fd5b806316c30ebc116101b657806316c30ebc14610297578063248a9ca3146102c757806326a4e8d2146102f75780632f2ff15d1461031757600080fd5b806301ffc9a7146101e8578063073275d61461021d578063075461721461023f578063127a944314610277575b600080fd5b3480156101f457600080fd5b506102086102033660046117e3565b6105fd565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d61023836600461185d565b610634565b005b34801561024b57600080fd5b5060025461025f906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b34801561028357600080fd5b5061023d6102923660046118bb565b6106b2565b3480156102a357600080fd5b506102b9600080516020611f8a83398151915281565b604051908152602001610214565b3480156102d357600080fd5b506102b96102e2366004611939565b60009081526020819052604090206001015490565b34801561030357600080fd5b5061023d610312366004611952565b610830565b34801561032357600080fd5b5061023d61033236600461196d565b61089a565b34801561034357600080fd5b506102b9600080516020611faa83398151915281565b34801561036557600080fd5b5061023d61037436600461196d565b6108c5565b34801561038557600080fd5b5061023d6108fd565b34801561039a57600080fd5b5061023d610baa565b3480156103af57600080fd5b5061023d6103be366004611999565b610c4a565b3480156103cf57600080fd5b506102b9670de0b6b3a764000081565b3480156103eb57600080fd5b506103f4610dd5565b60405161021499989796959493929190611a39565b34801561041557600080fd5b5061023d61042436600461185d565b610ea9565b34801561043557600080fd5b50610449610444366004611952565b610f17565b604051610214929190611a9e565b34801561046357600080fd5b5061025f7f000000000000000000000000000000000000000000000000000000000000000081565b61023d610499366004611939565b611043565b3480156104aa57600080fd5b506102086104b936600461196d565b611178565b3480156104ca57600080fd5b506102b96111a1565b3480156104df57600080fd5b5061023d6104ee36600461185d565b6111ea565b3480156104ff57600080fd5b506102b9600081565b34801561051457600080fd5b506102b9610523366004611939565b611258565b34801561053457600080fd5b506102b961126d565b34801561054957600080fd5b5061023d610558366004611952565b6112f2565b34801561056957600080fd5b5061023d610578366004611952565b611389565b61023d611420565b34801561059157600080fd5b506102b960035481565b3480156105a757600080fd5b5061023d6105b636600461196d565b61154e565b3480156105c757600080fd5b506105db6105d6366004611952565b611573565b6040516102149190611acc565b3480156105f457600080fd5b506105db611611565b60006001600160e01b03198216637965db0b60e01b148061062e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020611faa83398151915261064c8161169f565b336000908152600660205260409020600101610669838583611b75565b50336001600160a01b03167f9fc750bf7bba72860338740e2279108359d905f7e01ffd1e6dc73527589ad40384846040516106a5929190611c5e565b60405180910390a2505050565b6106ca600080516020611f8a83398151915233611178565b806106e857506106e8600080516020611faa83398151915233611178565b61070d5760405162461bcd60e51b815260040161070490611c72565b60405180910390fd5b600e54158061071d5750600e5442115b6107695760405162461bcd60e51b815260206004820152601e60248201527f50726576696f75732070726f706f73616c207374696c6c2061637469766500006044820152606401610704565b6007805487919060ff19166001836002811115610788576107886119bb565b02179055506009859055600a849055600b80546001600160a01b0319166001600160a01b03851617905560086107bf828483611b75565b506000600c819055600d556107d642610e10611cad565b600e819055600f805460ff191690556040517fc72525f10506a449c735ca60032efe0c6d5444d6f202b7f2c93c3d1f4abfe4f4916108209188918891889188918891908e90611cc0565b60405180910390a1505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108785760405162461bcd60e51b815260040161070490611d0f565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546108b58161169f565b6108bf83836116a9565b50505050565b6001600160a01b03811633146108ee5760405163334bd91960e11b815260040160405180910390fd5b6108f8828261173b565b505050565b610915600080516020611f8a83398151915233611178565b806109335750610933600080516020611faa83398151915233611178565b61094f5760405162461bcd60e51b815260040161070490611c72565b600e5442116109a05760405162461bcd60e51b815260206004820152601b60248201527f566f74696e6720706572696f64206e6f7420656e6465642079657400000000006044820152606401610704565b600f5460ff16156109f35760405162461bcd60e51b815260206004820152601960248201527f50726f706f73616c20616c7265616479206578656375746564000000000000006044820152606401610704565b600d54600c5411610a3e5760405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081b9bdd08185c1c1c9bdd9959605a1b6044820152606401610704565b600060075460ff166002811115610a5757610a576119bb565b03610a6757600954600355610b3d565b600160075460ff166002811115610a8057610a806119bb565b03610b1057600a54471015610ace5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610704565b600b54600a546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610b0a573d6000803e3d6000fd5b50610b3d565b600260075460ff166002811115610b2957610b296119bb565b03610b3d576004610b3b600882611d50565b505b600f805460ff191660011790556000600e55600954600a54600b546007546040517f4a9fb7b49935b501a20a8cab494417f2b799f95fa94f4930cd5842ff058e37b094610ba094909390926001600160a01b039091169160089160ff1690611e2d565b60405180910390a1565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bf25760405162461bcd60e51b815260040161070490611d0f565b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016904780156108fc02916000818181858888f19350505050158015610c47573d6000803e3d6000fd5b50565b610c62600080516020611f8a83398151915233611178565b80610c805750610c80600080516020611faa83398151915233611178565b610c9c5760405162461bcd60e51b815260040161070490611c72565b600e54421115610cee5760405162461bcd60e51b815260206004820152601760248201527f566f74696e6720706572696f642068617320656e6465640000000000000000006044820152606401610704565b3360009081526010602052604090205460ff1615610d3e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606401610704565b336000908152601060205260409020805460ff191660011790558015610d7f57600160076005016000828254610d749190611cad565b90915550610d9b9050565b600160076006016000828254610d959190611cad565b90915550505b604051811515815233907f8eb81cb806dbb3d8a2f94981614331a55dfd90e06a42fdc362ca3ca96981d92f9060200160405180910390a250565b600780546008805460ff9092169291610ded90611af5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1990611af5565b8015610e665780601f10610e3b57610100808354040283529160200191610e66565b820191906000526020600020905b815481529060010190602001808311610e4957829003601f168201915b50505050600283015460038401546004850154600586015460068701546007880154600890980154969794969395506001600160a01b0390921693909260ff1689565b600080516020611faa833981519152610ec18161169f565b336000908152600660205260409020610edb838583611b75565b50336001600160a01b03167fbe52200275e2f64246da91f4aef872310120b8f4beff2c0070b12be47a9edf5884846040516106a5929190611c5e565b600660205260009081526040902080548190610f3290611af5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5e90611af5565b8015610fab5780601f10610f8057610100808354040283529160200191610fab565b820191906000526020600020905b815481529060010190602001808311610f8e57829003601f168201915b505050505090806001018054610fc090611af5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fec90611af5565b80156110395780601f1061100e57610100808354040283529160200191611039565b820191906000526020600020905b81548152906001019060200180831161101c57829003601f168201915b5050505050905082565b61105b600080516020611f8a83398151915233611178565b806110795750611079600080516020611faa83398151915233611178565b6110955760405162461bcd60e51b815260040161070490611c72565b60006110a082611258565b9050803410156110f25760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e74204d415449432073656e740000000000000000006044820152606401610704565b6002546001600160a01b03166340c10f1933611116670de0b6b3a764000086611ee6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561115c57600080fd5b505af1158015611170573d6000803e3d6000fd5b505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806111ac61126d565b905060006111bd620f424083611efd565b9050600081600354670de0b6b3a76400006111d89190611ee6565b6111e29190611efd565b949350505050565b600080516020611f8a8339815191526112028161169f565b33600090815260056020526040902061121c838583611b75565b50336001600160a01b03167f5c0b0fee64c5b1390211931c219936c56fdd1c6eec57500cb7ac3f3d14e312a984846040516106a5929190611c5e565b6000816112636111a1565b61062e9190611ee6565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190611f39565b509195945050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461133a5760405162461bcd60e51b815260040161070490611d0f565b611352600080516020611faa8339815191528261089a565b6040516001600160a01b038216907f8bd91a100b831930fe26953ace3fd6dffdd31afb6a6e99dbd041bccdd07af03190600090a250565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113d15760405162461bcd60e51b815260040161070490611d0f565b6113e9600080516020611f8a8339815191528261089a565b6040516001600160a01b038216907fd6a97f28305731f789d708c5f2e7fb7f6c97b895cfe50c4312db41cc29bd870590600090a250565b611438600080516020611f8a83398151915233611178565b806114565750611456600080516020611faa83398151915233611178565b6114725760405162461bcd60e51b815260040161070490611c72565b600034116114b25760405162461bcd60e51b815260206004820152600d60248201526c139bc81350551250c81cd95b9d609a1b6044820152606401610704565b60006114bc6111a1565b6114c69034611efd565b6002549091506001600160a01b03166340c10f19336114ed670de0b6b3a764000085611ee6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561153357600080fd5b505af1158015611547573d6000803e3d6000fd5b5050505050565b6000828152602081905260409020600101546115698161169f565b6108bf838361173b565b60056020526000908152604090208054819061158e90611af5565b80601f01602080910402602001604051908101604052809291908181526020018280546115ba90611af5565b80156116075780601f106115dc57610100808354040283529160200191611607565b820191906000526020600020905b8154815290600101906020018083116115ea57829003601f168201915b5050505050905081565b6004805461161e90611af5565b80601f016020809104026020016040519081016040528092919081815260200182805461164a90611af5565b80156116975780601f1061166c57610100808354040283529160200191611697565b820191906000526020600020905b81548152906001019060200180831161167a57829003601f168201915b505050505081565b610c4781336117a6565b60006116b58383611178565b611733576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556116eb3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161062e565b50600061062e565b60006117478383611178565b15611733576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161062e565b6117b08282611178565b6117df5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610704565b5050565b6000602082840312156117f557600080fd5b81356001600160e01b03198116811461180d57600080fd5b9392505050565b60008083601f84011261182657600080fd5b50813567ffffffffffffffff81111561183e57600080fd5b60208301915083602082850101111561185657600080fd5b9250929050565b6000806020838503121561187057600080fd5b823567ffffffffffffffff81111561188757600080fd5b61189385828601611814565b90969095509350505050565b80356001600160a01b03811681146118b657600080fd5b919050565b60008060008060008060a087890312156118d457600080fd5b8635600381106118e357600080fd5b955060208701359450604087013593506118ff6060880161189f565b9250608087013567ffffffffffffffff81111561191b57600080fd5b61192789828a01611814565b979a9699509497509295939492505050565b60006020828403121561194b57600080fd5b5035919050565b60006020828403121561196457600080fd5b61180d8261189f565b6000806040838503121561198057600080fd5b823591506119906020840161189f565b90509250929050565b6000602082840312156119ab57600080fd5b8135801515811461180d57600080fd5b634e487b7160e01b600052602160045260246000fd5b600381106119ef57634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b81811015611a19576020818501810151868301820152016119fd565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120611a48838d6119d1565b806020840152611a5a8184018c6119f3565b604084019a909a52505060608101969096526001600160a01b0394909416608086015260a085019290925260c084015260e083015215156101009091015292915050565b604081526000611ab160408301856119f3565b8281036020840152611ac381856119f3565b95945050505050565b60208152600061180d60208301846119f3565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611b0957607f821691505b602082108103611b2957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108f857600081815260208120601f850160051c81016020861015611b565750805b601f850160051c820191505b8181101561117057828155600101611b62565b67ffffffffffffffff831115611b8d57611b8d611adf565b611ba183611b9b8354611af5565b83611b2f565b6000601f841160018114611bd55760008515611bbd5750838201355b600019600387901b1c1916600186901b178355611547565b600083815260209020601f19861690835b82811015611c065786850135825560209485019460019092019101611be6565b5086821015611c235760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006111e2602083018486611c35565b6020808252600b908201526a139bdd08185b1b1bddd95960aa1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561062e5761062e611c97565b87815286602082015260018060a01b038616604082015260c060608201526000611cee60c083018688611c35565b9050836080830152611d0360a08301846119d1565b98975050505050505050565b60208082526021908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b818103611d5b575050565b611d658254611af5565b67ffffffffffffffff811115611d7d57611d7d611adf565b611d9181611d8b8454611af5565b84611b2f565b6000601f821160018114611dc55760008315611dad5750848201545b600019600385901b1c1916600184901b178455611547565b600085815260209020601f19841690600086815260209020845b83811015611dff5782860154825560019586019590910190602001611ddf565b5085831015611e1d5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260006020868184015260018060a01b038616604084015260a0606084015260008554611e5b81611af5565b8060a087015260c0600180841660008114611e7d5760018114611e9757611ec5565b60ff1985168984015283151560051b890183019550611ec5565b8a6000528660002060005b85811015611ebd5781548b8201860152908301908801611ea2565b8a0184019650505b50505050508092505050611edc60808301846119d1565b9695505050505050565b808202811582820484141761062e5761062e611c97565b600082611f1a57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff811681146118b657600080fd5b600080600080600060a08688031215611f5157600080fd5b611f5a86611f1f565b9450602086015193506040860151925060608601519150611f7d60808701611f1f565b9050929550929590935056fece04d177cfe9f73a7157bda35b0add7251966ad70509ceaef76ad7d5e6c450428c6864d14af7e836c07afb1da9d476ebdc26933212c2a9bb10236988c4a3a46fa2646970667358221220c788251f5e17e1fe96a49432dca04b3b15103d0242fb401cf125f33f1e2c103564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063872190a311610102578063bea4dfb511610095578063d4b4993511610064578063d4b4993514610585578063d547741f1461059b578063e2eb41ff146105bb578063ef690cc0146105e857600080fd5b8063bea4dfb514610528578063c93d40df1461053d578063ce5ac8961461055d578063d0febe4c1461057d57600080fd5b806392992d25116100d157806392992d25146104be5780639ad665d9146104d3578063a217fddf146104f3578063b5e4668f1461050857600080fd5b8063872190a3146104295780638da5cb5b146104575780638f14e5fc1461048b57806391d148541461049e57600080fd5b806334c240af1161017a5780634b9f5c98116101495780634b9f5c98146103a357806356780085146103c3578063753ec103146103df57806383101e831461040957600080fd5b806334c240af1461033757806336568abe14610359578063373058b8146103795780633ccfd60b1461038e57600080fd5b806316c30ebc116101b657806316c30ebc14610297578063248a9ca3146102c757806326a4e8d2146102f75780632f2ff15d1461031757600080fd5b806301ffc9a7146101e8578063073275d61461021d578063075461721461023f578063127a944314610277575b600080fd5b3480156101f457600080fd5b506102086102033660046117e3565b6105fd565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d61023836600461185d565b610634565b005b34801561024b57600080fd5b5060025461025f906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b34801561028357600080fd5b5061023d6102923660046118bb565b6106b2565b3480156102a357600080fd5b506102b9600080516020611f8a83398151915281565b604051908152602001610214565b3480156102d357600080fd5b506102b96102e2366004611939565b60009081526020819052604090206001015490565b34801561030357600080fd5b5061023d610312366004611952565b610830565b34801561032357600080fd5b5061023d61033236600461196d565b61089a565b34801561034357600080fd5b506102b9600080516020611faa83398151915281565b34801561036557600080fd5b5061023d61037436600461196d565b6108c5565b34801561038557600080fd5b5061023d6108fd565b34801561039a57600080fd5b5061023d610baa565b3480156103af57600080fd5b5061023d6103be366004611999565b610c4a565b3480156103cf57600080fd5b506102b9670de0b6b3a764000081565b3480156103eb57600080fd5b506103f4610dd5565b60405161021499989796959493929190611a39565b34801561041557600080fd5b5061023d61042436600461185d565b610ea9565b34801561043557600080fd5b50610449610444366004611952565b610f17565b604051610214929190611a9e565b34801561046357600080fd5b5061025f7f000000000000000000000000000000000000000000000000000000000000000081565b61023d610499366004611939565b611043565b3480156104aa57600080fd5b506102086104b936600461196d565b611178565b3480156104ca57600080fd5b506102b96111a1565b3480156104df57600080fd5b5061023d6104ee36600461185d565b6111ea565b3480156104ff57600080fd5b506102b9600081565b34801561051457600080fd5b506102b9610523366004611939565b611258565b34801561053457600080fd5b506102b961126d565b34801561054957600080fd5b5061023d610558366004611952565b6112f2565b34801561056957600080fd5b5061023d610578366004611952565b611389565b61023d611420565b34801561059157600080fd5b506102b960035481565b3480156105a757600080fd5b5061023d6105b636600461196d565b61154e565b3480156105c757600080fd5b506105db6105d6366004611952565b611573565b6040516102149190611acc565b3480156105f457600080fd5b506105db611611565b60006001600160e01b03198216637965db0b60e01b148061062e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020611faa83398151915261064c8161169f565b336000908152600660205260409020600101610669838583611b75565b50336001600160a01b03167f9fc750bf7bba72860338740e2279108359d905f7e01ffd1e6dc73527589ad40384846040516106a5929190611c5e565b60405180910390a2505050565b6106ca600080516020611f8a83398151915233611178565b806106e857506106e8600080516020611faa83398151915233611178565b61070d5760405162461bcd60e51b815260040161070490611c72565b60405180910390fd5b600e54158061071d5750600e5442115b6107695760405162461bcd60e51b815260206004820152601e60248201527f50726576696f75732070726f706f73616c207374696c6c2061637469766500006044820152606401610704565b6007805487919060ff19166001836002811115610788576107886119bb565b02179055506009859055600a849055600b80546001600160a01b0319166001600160a01b03851617905560086107bf828483611b75565b506000600c819055600d556107d642610e10611cad565b600e819055600f805460ff191690556040517fc72525f10506a449c735ca60032efe0c6d5444d6f202b7f2c93c3d1f4abfe4f4916108209188918891889188918891908e90611cc0565b60405180910390a1505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108785760405162461bcd60e51b815260040161070490611d0f565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546108b58161169f565b6108bf83836116a9565b50505050565b6001600160a01b03811633146108ee5760405163334bd91960e11b815260040160405180910390fd5b6108f8828261173b565b505050565b610915600080516020611f8a83398151915233611178565b806109335750610933600080516020611faa83398151915233611178565b61094f5760405162461bcd60e51b815260040161070490611c72565b600e5442116109a05760405162461bcd60e51b815260206004820152601b60248201527f566f74696e6720706572696f64206e6f7420656e6465642079657400000000006044820152606401610704565b600f5460ff16156109f35760405162461bcd60e51b815260206004820152601960248201527f50726f706f73616c20616c7265616479206578656375746564000000000000006044820152606401610704565b600d54600c5411610a3e5760405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081b9bdd08185c1c1c9bdd9959605a1b6044820152606401610704565b600060075460ff166002811115610a5757610a576119bb565b03610a6757600954600355610b3d565b600160075460ff166002811115610a8057610a806119bb565b03610b1057600a54471015610ace5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610704565b600b54600a546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610b0a573d6000803e3d6000fd5b50610b3d565b600260075460ff166002811115610b2957610b296119bb565b03610b3d576004610b3b600882611d50565b505b600f805460ff191660011790556000600e55600954600a54600b546007546040517f4a9fb7b49935b501a20a8cab494417f2b799f95fa94f4930cd5842ff058e37b094610ba094909390926001600160a01b039091169160089160ff1690611e2d565b60405180910390a1565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bf25760405162461bcd60e51b815260040161070490611d0f565b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016904780156108fc02916000818181858888f19350505050158015610c47573d6000803e3d6000fd5b50565b610c62600080516020611f8a83398151915233611178565b80610c805750610c80600080516020611faa83398151915233611178565b610c9c5760405162461bcd60e51b815260040161070490611c72565b600e54421115610cee5760405162461bcd60e51b815260206004820152601760248201527f566f74696e6720706572696f642068617320656e6465640000000000000000006044820152606401610704565b3360009081526010602052604090205460ff1615610d3e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606401610704565b336000908152601060205260409020805460ff191660011790558015610d7f57600160076005016000828254610d749190611cad565b90915550610d9b9050565b600160076006016000828254610d959190611cad565b90915550505b604051811515815233907f8eb81cb806dbb3d8a2f94981614331a55dfd90e06a42fdc362ca3ca96981d92f9060200160405180910390a250565b600780546008805460ff9092169291610ded90611af5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1990611af5565b8015610e665780601f10610e3b57610100808354040283529160200191610e66565b820191906000526020600020905b815481529060010190602001808311610e4957829003601f168201915b50505050600283015460038401546004850154600586015460068701546007880154600890980154969794969395506001600160a01b0390921693909260ff1689565b600080516020611faa833981519152610ec18161169f565b336000908152600660205260409020610edb838583611b75565b50336001600160a01b03167fbe52200275e2f64246da91f4aef872310120b8f4beff2c0070b12be47a9edf5884846040516106a5929190611c5e565b600660205260009081526040902080548190610f3290611af5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5e90611af5565b8015610fab5780601f10610f8057610100808354040283529160200191610fab565b820191906000526020600020905b815481529060010190602001808311610f8e57829003601f168201915b505050505090806001018054610fc090611af5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fec90611af5565b80156110395780601f1061100e57610100808354040283529160200191611039565b820191906000526020600020905b81548152906001019060200180831161101c57829003601f168201915b5050505050905082565b61105b600080516020611f8a83398151915233611178565b806110795750611079600080516020611faa83398151915233611178565b6110955760405162461bcd60e51b815260040161070490611c72565b60006110a082611258565b9050803410156110f25760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e74204d415449432073656e740000000000000000006044820152606401610704565b6002546001600160a01b03166340c10f1933611116670de0b6b3a764000086611ee6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561115c57600080fd5b505af1158015611170573d6000803e3d6000fd5b505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806111ac61126d565b905060006111bd620f424083611efd565b9050600081600354670de0b6b3a76400006111d89190611ee6565b6111e29190611efd565b949350505050565b600080516020611f8a8339815191526112028161169f565b33600090815260056020526040902061121c838583611b75565b50336001600160a01b03167f5c0b0fee64c5b1390211931c219936c56fdd1c6eec57500cb7ac3f3d14e312a984846040516106a5929190611c5e565b6000816112636111a1565b61062e9190611ee6565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190611f39565b509195945050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461133a5760405162461bcd60e51b815260040161070490611d0f565b611352600080516020611faa8339815191528261089a565b6040516001600160a01b038216907f8bd91a100b831930fe26953ace3fd6dffdd31afb6a6e99dbd041bccdd07af03190600090a250565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113d15760405162461bcd60e51b815260040161070490611d0f565b6113e9600080516020611f8a8339815191528261089a565b6040516001600160a01b038216907fd6a97f28305731f789d708c5f2e7fb7f6c97b895cfe50c4312db41cc29bd870590600090a250565b611438600080516020611f8a83398151915233611178565b806114565750611456600080516020611faa83398151915233611178565b6114725760405162461bcd60e51b815260040161070490611c72565b600034116114b25760405162461bcd60e51b815260206004820152600d60248201526c139bc81350551250c81cd95b9d609a1b6044820152606401610704565b60006114bc6111a1565b6114c69034611efd565b6002549091506001600160a01b03166340c10f19336114ed670de0b6b3a764000085611ee6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561153357600080fd5b505af1158015611547573d6000803e3d6000fd5b5050505050565b6000828152602081905260409020600101546115698161169f565b6108bf838361173b565b60056020526000908152604090208054819061158e90611af5565b80601f01602080910402602001604051908101604052809291908181526020018280546115ba90611af5565b80156116075780601f106115dc57610100808354040283529160200191611607565b820191906000526020600020905b8154815290600101906020018083116115ea57829003601f168201915b5050505050905081565b6004805461161e90611af5565b80601f016020809104026020016040519081016040528092919081815260200182805461164a90611af5565b80156116975780601f1061166c57610100808354040283529160200191611697565b820191906000526020600020905b81548152906001019060200180831161167a57829003601f168201915b505050505081565b610c4781336117a6565b60006116b58383611178565b611733576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556116eb3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161062e565b50600061062e565b60006117478383611178565b15611733576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161062e565b6117b08282611178565b6117df5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610704565b5050565b6000602082840312156117f557600080fd5b81356001600160e01b03198116811461180d57600080fd5b9392505050565b60008083601f84011261182657600080fd5b50813567ffffffffffffffff81111561183e57600080fd5b60208301915083602082850101111561185657600080fd5b9250929050565b6000806020838503121561187057600080fd5b823567ffffffffffffffff81111561188757600080fd5b61189385828601611814565b90969095509350505050565b80356001600160a01b03811681146118b657600080fd5b919050565b60008060008060008060a087890312156118d457600080fd5b8635600381106118e357600080fd5b955060208701359450604087013593506118ff6060880161189f565b9250608087013567ffffffffffffffff81111561191b57600080fd5b61192789828a01611814565b979a9699509497509295939492505050565b60006020828403121561194b57600080fd5b5035919050565b60006020828403121561196457600080fd5b61180d8261189f565b6000806040838503121561198057600080fd5b823591506119906020840161189f565b90509250929050565b6000602082840312156119ab57600080fd5b8135801515811461180d57600080fd5b634e487b7160e01b600052602160045260246000fd5b600381106119ef57634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b81811015611a19576020818501810151868301820152016119fd565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120611a48838d6119d1565b806020840152611a5a8184018c6119f3565b604084019a909a52505060608101969096526001600160a01b0394909416608086015260a085019290925260c084015260e083015215156101009091015292915050565b604081526000611ab160408301856119f3565b8281036020840152611ac381856119f3565b95945050505050565b60208152600061180d60208301846119f3565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611b0957607f821691505b602082108103611b2957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108f857600081815260208120601f850160051c81016020861015611b565750805b601f850160051c820191505b8181101561117057828155600101611b62565b67ffffffffffffffff831115611b8d57611b8d611adf565b611ba183611b9b8354611af5565b83611b2f565b6000601f841160018114611bd55760008515611bbd5750838201355b600019600387901b1c1916600186901b178355611547565b600083815260209020601f19861690835b82811015611c065786850135825560209485019460019092019101611be6565b5086821015611c235760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006111e2602083018486611c35565b6020808252600b908201526a139bdd08185b1b1bddd95960aa1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561062e5761062e611c97565b87815286602082015260018060a01b038616604082015260c060608201526000611cee60c083018688611c35565b9050836080830152611d0360a08301846119d1565b98975050505050505050565b60208082526021908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b818103611d5b575050565b611d658254611af5565b67ffffffffffffffff811115611d7d57611d7d611adf565b611d9181611d8b8454611af5565b84611b2f565b6000601f821160018114611dc55760008315611dad5750848201545b600019600385901b1c1916600184901b178455611547565b600085815260209020601f19841690600086815260209020845b83811015611dff5782860154825560019586019590910190602001611ddf565b5085831015611e1d5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260006020868184015260018060a01b038616604084015260a0606084015260008554611e5b81611af5565b8060a087015260c0600180841660008114611e7d5760018114611e9757611ec5565b60ff1985168984015283151560051b890183019550611ec5565b8a6000528660002060005b85811015611ebd5781548b8201860152908301908801611ea2565b8a0184019650505b50505050508092505050611edc60808301846119d1565b9695505050505050565b808202811582820484141761062e5761062e611c97565b600082611f1a57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff811681146118b657600080fd5b600080600080600060a08688031215611f5157600080fd5b611f5a86611f1f565b9450602086015193506040860151925060608601519150611f7d60808701611f1f565b9050929550929590935056fece04d177cfe9f73a7157bda35b0add7251966ad70509ceaef76ad7d5e6c450428c6864d14af7e836c07afb1da9d476ebdc26933212c2a9bb10236988c4a3a46fa2646970667358221220c788251f5e17e1fe96a49432dca04b3b15103d0242fb401cf125f33f1e2c103564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addGamemaster(address)": {
        "params": {
          "gamemaster": "The address of the gamemaster to be added."
        }
      },
      "allowPlayer(address)": {
        "params": {
          "player": "The address of the player to be allowed."
        }
      },
      "buyAmountTokens(uint256)": {
        "params": {
          "numberOfGTs": "The number of GamesTokens to buy."
        }
      },
      "constructor": {
        "details": "Sets the owner, roles and initializes the MATIC/USD price feed on the Polygon Amoy Testnet."
      },
      "createProposal(uint8,uint256,uint256,address,string)": {
        "params": {
          "amount": "The amount of funds to send (for SEND_FUNDS).",
          "catchphrase": "The new catchphrase (for UPDATE_CATCHPHRASE).",
          "newPrice": "The new price for the token in cents (for CHANGE_PRICE).",
          "proposalType": "The type of proposal."
        }
      },
      "getChainlinkDataFeedLatestAnswer()": {
        "returns": {
          "_0": "price The latest MATIC price in USD."
        }
      },
      "getMATICForGTs(uint256)": {
        "params": {
          "numberOfGTs": "The number of GamesTokens to buy."
        },
        "returns": {
          "_0": "howMuchMatic The total amount of MATIC needed for the specified number of GamesTokens."
        }
      },
      "getMATICForOneGT()": {
        "returns": {
          "_0": "gamesTokenPriceInWei The amount of MATIC (18 decimals) needed for one GamesToken."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setTokenAddress(address)": {
        "params": {
          "tokenAddress": "The address of the token contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateGamemasterCatchphrase(string)": {
        "params": {
          "catchphrase": "The new catchphrase for the gamemaster."
        }
      },
      "updateGamemasterStylePrompt(string)": {
        "params": {
          "stylePrompt": "The new style prompt for the gamemaster."
        }
      },
      "updatePlayerCatchphrase(string)": {
        "params": {
          "catchphrase": "The new catchphrase for the player."
        }
      },
      "vote(bool)": {
        "params": {
          "voteFor": "True to vote in favor, false to vote against."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGamemaster(address)": {
        "notice": "Allows the owner to designate a gamemaster."
      },
      "allowPlayer(address)": {
        "notice": "Allows the owner to permit a player to participate."
      },
      "buyAmountTokens(uint256)": {
        "notice": "Allows players to buy a specified number of GamesTokens."
      },
      "buyTokens()": {
        "notice": "Allows players to buy GamesTokens based on the amount of MATIC sent."
      },
      "createProposal(uint8,uint256,uint256,address,string)": {
        "notice": "Creates a proposal for various actions like changing token price, updating catchphrase, or sending funds."
      },
      "executeProposal()": {
        "notice": "Executes the proposal if voting is complete and conditions are met."
      },
      "getChainlinkDataFeedLatestAnswer()": {
        "notice": "Retrieves the latest price of MATIC in USD from the Chainlink data feed."
      },
      "getMATICForGTs(uint256)": {
        "notice": "Calculates the total MATIC required for a given number of GamesTokens."
      },
      "getMATICForOneGT()": {
        "notice": "Calculates the amount of MATIC required to buy one GamesToken."
      },
      "setTokenAddress(address)": {
        "notice": "Sets the token contract address for minting."
      },
      "updateGamemasterCatchphrase(string)": {
        "notice": "Allows a gamemaster to update their catchphrase."
      },
      "updateGamemasterStylePrompt(string)": {
        "notice": "Allows a gamemaster to update their style prompt."
      },
      "updatePlayerCatchphrase(string)": {
        "notice": "Allows a player to update their catchphrase."
      },
      "vote(bool)": {
        "notice": "Allows allowed users to vote on the active proposal."
      },
      "withdraw()": {
        "notice": "Allows the owner to withdraw the contract balance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2784,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2779_storage)"
      },
      {
        "astId": 6370,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)1134"
      },
      {
        "astId": 6373,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "minter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(TokenInterface)6365"
      },
      {
        "astId": 6376,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "gamesTokenPriceInCents",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6381,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "greeting",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 6437,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "players",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Player)6427_storage)"
      },
      {
        "astId": 6442,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "gamemasters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Gamemaster)6432_storage)"
      },
      {
        "astId": 6445,
        "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
        "label": "proposal",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Proposal)6424_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)1134": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(TokenInterface)6365": {
        "encoding": "inplace",
        "label": "contract TokenInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalType)6400": {
        "encoding": "inplace",
        "label": "enum GamesDAOv3.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Gamemaster)6432_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GamesDAOv3.Gamemaster)",
        "numberOfBytes": "32",
        "value": "t_struct(Gamemaster)6432_storage"
      },
      "t_mapping(t_address,t_struct(Player)6427_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GamesDAOv3.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)6427_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2779_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2779_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Gamemaster)6432_storage": {
        "encoding": "inplace",
        "label": "struct GamesDAOv3.Gamemaster",
        "members": [
          {
            "astId": 6429,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "catchphrase",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6431,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "stylePrompt",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Player)6427_storage": {
        "encoding": "inplace",
        "label": "struct GamesDAOv3.Player",
        "members": [
          {
            "astId": 6426,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "catchphrase",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)6424_storage": {
        "encoding": "inplace",
        "label": "struct GamesDAOv3.Proposal",
        "members": [
          {
            "astId": 6403,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "proposalType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ProposalType)6400"
          },
          {
            "astId": 6405,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "catchphrase",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6407,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "newPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6409,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6411,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "to",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6413,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "votesFor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6415,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "votesAgainst",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6417,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "deadline",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6419,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "executed",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 6423,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "voters",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)2779_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2776,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2778,
            "contract": "contracts/GamesDAOv3.sol:GamesDAOv3",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}