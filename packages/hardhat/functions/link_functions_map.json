{
  "31337": {
    "00_backstory_gpt.ts": {
      "name": "00_backstory_gpt.ts",
      "path": "/Users/uklok/Software Development/learning/BlockMagic Hackathon/Ceptor-scaffold-OP/packages/hardhat/functions/00_backstory_gpt.ts",
      "source": "// [1] ARGUMENT DECLARATION //\n\n// gets: character class for the backstory.\nconst CHARACTER_CLASS = args[0]; // --------------> |   Wizard\n\n// gets: character race for the backstory.\nconst CHARACTER_RACE = args[1]; // --------------> |   Elf\n\nconst CHARACTER_NAME = args[2]; // --------------> |   Eldon\n// [2] PROMPT ENGINEERING //\n\nconst prompt = `Generate a D&D 5e backstory for ${CHARACTER_NAME}, a Level 1 ${CHARACTER_CLASS} who is a ${CHARACTER_RACE}. The backstory should be extremely short, dense, powerful, engaging, coherent, and suitable for a fantasy RPG setting. Just reply with the one paragraph backstory and nothing else.`;\n\n// [3] AI DATA REQUEST //\n\n// requests: OpenAI API using Functions\nconst openAIRequest = await Functions.makeHttpRequest({\n  url: `https://api.openai.com/v1/chat/completions`,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${secrets.apiKey}`,\n  },\n  data: {\n    model: \"gpt-3.5-turbo\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are generating a character backstory.\",\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ],\n  },\n  timeout: 10_000,\n  maxTokens: 100,\n  responseType: \"json\",\n});\n\nconst response = await openAIRequest;\n\n// finds: the response and returns the result (as a string).\nconst backstory = response.data?.choices[0].message.content;\n\nconsole.log(`Generated backstory: %s`, backstory);\n\nreturn Functions.encodeString(backstory || \"Failed\");\n",
      "checksum": "c7e0ee9db83cc9004e86af02fb95d0e40c7b61824c69e6e2e96e217164ede9a4",
      "subscriptionId": 1,
      "consumerAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
    },
    "01_onboarding_notification.ts": {
      "name": "01_onboarding_notification.ts",
      "path": "/Users/uklok/Software Development/learning/BlockMagic Hackathon/Ceptor-scaffold-OP/packages/hardhat/functions/01_onboarding_notification.ts",
      "source": "async function receive(url, auth) {\n  const batch = 5;\n  const data = {\n    count: batch,\n    ackmode: \"ack_requeue_true\",\n    encoding: 'auto'\n  };\n\n  let msgs = [];\n  do {\n    const request = Functions.makeHttpRequest({\n      url: url,\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${auth}`,\n        'Content-Type': 'application/json'\n      },\n      data: data,\n      timeout: 10_000,\n      responseType: 'json'\n    });\n\n    const response = await request;\n    if (response.error) {\n      console.error(`receive msg error: ${response.code} ${response.message}`);\n      throw Error(\"Request failed\");\n    }\n\n    msgs = response.data;\n    for (let i in msgs) {\n      const msg = JSON.parse(msgs[i].payload);\n      const url = msg.url;\n      const apiKey = msg.apiKey;\n      const from = msg.from;\n      const to = msg.to;\n      const username = msg.username;\n      console.log(`url ${url} apiKey ${apiKey}`);\n      await notify(url, apiKey, from, to, username);\n    }\n  } while (msgs.lengh < batch);\n}\n\nasync function notify(url, apiKey, from, to, username) {\n  const content = `\n    Hi, ${username}:\n  \n    Welcome to join the Ceptor Club,\n  \n    We are a worldwide party of role-players who came together to make an app that would make the process of playing a fantasy RPG together easier and more visually engaging.\n    Learn more: https://ceptor.club/.\n  \n    Please join our discord https://discord.gg/EYZwc7De.\n    `.trim();\n  const msg = {\n    personalizations: [\n      {\n        to: [{ email: to }]\n      }\n    ],\n    from: { email: from },\n    subject: 'Ceptor Club onboarding',\n    content: [\n      {\n        type: 'text/plain',\n        value: content\n      }\n    ]\n  };\n\n  const request = Functions.makeHttpRequest({\n    url: url,\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    },\n    data: msg,\n    timeout: 20_000,\n    responseType: 'json'\n  });\n\n  const response = await request;\n  if (response.error && response.message !== 'SyntaxError: Unexpected end of JSON input') {\n    console.error(`notify error: ${response.message}`);\n    throw Error(\"Request failed\");\n  } else {\n    console.log(`notify: ${response.statusText} ${response.data}`);\n  }\n}\n\nconst url = args[0];\nif (url) {\n  throw Error(\"url is missing.\");\n}\n\nconst auth = secrets.auth;\nif (!auth) {\n  throw Error(\"auth is missing.\");\n}\n\nawait receive(url, auth);\n\nreturn Functions.encodeString('Succeed');",
      "checksum": "b2722db995d9ec5263450596fad5c47e207d064f672955d367a053e6a953173d",
      "subscriptionId": 2,
      "consumerAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "secret": {
        "reference": "0x6c6f63616c3a3100000000000000000000000000000000000000000000000000",
        "validUntil": 1748057547241
      }
    }
  },
  "80002": {
    "00_backstory_gpt.ts": {
      "name": "00_backstory_gpt.ts",
      "path": "/Users/uklok/Software Development/learning/BlockMagic Hackathon/Ceptor-scaffold-OP/packages/hardhat/functions/00_backstory_gpt.ts",
      "source": "// [1] ARGUMENT DECLARATION //\n\n// gets: character class for the backstory.\nconst CHARACTER_CLASS = args[0]; // --------------> |   Wizard\n\n// gets: character race for the backstory.\nconst CHARACTER_RACE = args[1]; // --------------> |   Elf\n\nconst CHARACTER_NAME = args[2]; // --------------> |   Eldon\n// [2] PROMPT ENGINEERING //\n\nconst prompt = `Generate a D&D 5e backstory for ${CHARACTER_NAME}, a Level 1 ${CHARACTER_CLASS} who is a ${CHARACTER_RACE}. The backstory should be extremely short, dense, powerful, engaging, coherent, and suitable for a fantasy RPG setting. Just reply with the one paragraph backstory and nothing else.`;\n\n// [3] AI DATA REQUEST //\n\n// requests: OpenAI API using Functions\nconst openAIRequest = await Functions.makeHttpRequest({\n  url: `https://api.openai.com/v1/chat/completions`,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${secrets.apiKey}`,\n  },\n  data: {\n    model: \"gpt-3.5-turbo\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are generating a character backstory.\",\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ],\n  },\n  timeout: 10_000,\n  maxTokens: 100,\n  responseType: \"json\",\n});\n\nconst response = await openAIRequest;\n\n// finds: the response and returns the result (as a string).\nconst backstory = response.data?.choices[0].message.content;\n\nconsole.log(`Generated backstory: %s`, backstory);\n\nreturn Functions.encodeString(backstory || \"Failed\");\n",
      "checksum": "c7e0ee9db83cc9004e86af02fb95d0e40c7b61824c69e6e2e96e217164ede9a4",
      "subscriptionId": 238,
      "consumerAddress": "0x26f0EB234DE737fE9dEf0fF1F3206848e55799D8"
    },
    "01_onboarding_notification.ts": {
      "name": "01_onboarding_notification.ts",
      "path": "/Users/uklok/Software Development/learning/BlockMagic Hackathon/Ceptor-scaffold-OP/packages/hardhat/functions/01_onboarding_notification.ts",
      "source": "async function main(batch, url, auth) {\n  const msgs = await receive(batch, url, auth);\n  for (let i in msgs) {\n    const msg = JSON.parse(msgs[i].payload);\n    const url = msg.url;\n    const apiKey = msg.apiKey;\n    const from = msg.from;\n    const to = msg.to;\n    const username = msg.username;\n    console.log(`url ${url} apiKey ${apiKey}`);\n    await notify(url, apiKey, from, to, username);\n  }\n}\n\nasync function receive(batch, url, auth) {\n  const data = {\n    count: batch,\n    ackmode: \"ack_requeue_false\",\n    encoding: \"auto\",\n  };\n\n  const request = Functions.makeHttpRequest({\n    url: url,\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${auth}`,\n      \"Content-Type\": \"application/json\",\n    },\n    data: data,\n    timeout: 10_000,\n    responseType: \"json\",\n  });\n\n  const response = await request;\n  if (response.error) {\n    console.error(`receive msg error: ${response.code} ${response.message}`);\n    throw Error(\"Request failed\");\n  }\n\n  return response.data;\n}\n\nasync function notify(url, apiKey, from, to, username) {\n  const content = `\n    Hi, ${username}:\n  \n    Welcome to join the Ceptor Club,\n  \n    We are a worldwide party of role-players who came together to make an app that would make the process of playing a fantasy RPG together easier and more visually engaging.\n    Learn more: https://ceptor.club/.\n  \n    Please join our discord https://discord.gg/EYZwc7De.\n    `.trim();\n  const msg = {\n    personalizations: [\n      {\n        to: [{ email: to }],\n      },\n    ],\n    from: { email: from },\n    subject: \"Ceptor Club onboarding\",\n    content: [\n      {\n        type: \"text/plain\",\n        value: content,\n      },\n    ],\n  };\n\n  const request = Functions.makeHttpRequest({\n    url: url,\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    data: msg,\n    timeout: 20_000,\n    responseType: \"json\",\n  });\n\n  const response = await request;\n  if (response.error && response.message !== \"SyntaxError: Unexpected end of JSON input\") {\n    console.error(`notify error: ${response.message}`);\n    throw Error(\"Request failed\");\n  } else {\n    console.log(`notify: ${response.statusText} ${response.data}`);\n  }\n}\n\nconst batch = args[0];\nif (!batch) {\n  throw Error(\"batch is missing.\");\n}\n\nconst url = args[1];\nif (!url) {\n  throw Error(\"url is missing.\");\n}\n\nconst auth = secrets.auth;\nif (!auth) {\n  throw Error(\"auth is missing.\");\n}\n\nawait main(parseInt(batch), url, auth);\n\nreturn Functions.encodeString(\"Succeed\");\n",
      "checksum": "dccb3f6521aadba6a50b68e6603941058639be30273789a31bafa29289ab2434",
      "subscriptionId": 289,
      "consumerAddress": "0x26f0EB234DE737fE9dEf0fF1F3206848e55799D8",
      "secret": {
        "reference": "0xa266736c6f744964016776657273696f6e1a665c0472",
        "validUntil": 1717392881725
      }
    }
  },
  "84532": {
    "00_backstory_gpt.ts": {
      "name": "00_backstory_gpt.ts",
      "path": "/Users/uklok/Software Development/learning/BlockMagic Hackathon/Ceptor-scaffold-OP/packages/hardhat/functions/00_backstory_gpt.ts",
      "source": "// [1] ARGUMENT DECLARATION //\n\n// gets: character class for the backstory.\nconst CHARACTER_CLASS = args[0]; // --------------> |   Wizard\n\n// gets: character race for the backstory.\nconst CHARACTER_RACE = args[1]; // --------------> |   Elf\n\nconst CHARACTER_NAME = args[2]; // --------------> |   Eldon\n// [2] PROMPT ENGINEERING //\n\nconst prompt = `Generate a D&D 5e backstory for ${CHARACTER_NAME}, a Level 1 ${CHARACTER_CLASS} who is a ${CHARACTER_RACE}. The backstory should be extremely short, dense, powerful, engaging, coherent, and suitable for a fantasy RPG setting. Just reply with the one paragraph backstory and nothing else.`;\n\n// [3] AI DATA REQUEST //\n\n// requests: OpenAI API using Functions\nconst openAIRequest = await Functions.makeHttpRequest({\n  url: `https://api.openai.com/v1/chat/completions`,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${secrets.apiKey}`,\n  },\n  data: {\n    model: \"gpt-3.5-turbo\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are generating a character backstory.\",\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ],\n  },\n  timeout: 10_000,\n  maxTokens: 100,\n  responseType: \"json\",\n});\n\nconst response = await openAIRequest;\n\n// finds: the response and returns the result (as a string).\nconst backstory = response.data?.choices[0].message.content;\n\nconsole.log(`Generated backstory: %s`, backstory);\n\nreturn Functions.encodeString(backstory || \"Failed\");\n",
      "checksum": "c7e0ee9db83cc9004e86af02fb95d0e40c7b61824c69e6e2e96e217164ede9a4",
      "subscriptionId": 56,
      "consumerAddress": "0xe9926D1122669816E6403175B998aDD6DD776d26"
    }
  },
  "11155111": {
    "00_backstory_gpt.ts": {
      "name": "00_backstory_gpt.ts",
      "path": "/mnt/x/ceptor-club/blockmagic-tech-team/packages/hardhat/functions/00_backstory_gpt.ts",
      "source": "// [1] ARGUMENT DECLARATION //\n\n// gets: character class for the backstory.\nconst CHARACTER_CLASS = args[0]; // --------------> |   Wizard\n\n// gets: character race for the backstory.\nconst CHARACTER_RACE = args[1]; // --------------> |   Elf\n\nconst CHARACTER_NAME = args[2]; // --------------> |   Eldon\n// [2] PROMPT ENGINEERING //\n\nconst prompt = `Generate a D&D 5e backstory for ${CHARACTER_NAME}, a Level 1 ${CHARACTER_CLASS} who is a ${CHARACTER_RACE}. The backstory should be extremely short, dense, powerful, engaging, coherent, and suitable for a fantasy RPG setting. Just reply with the one paragraph backstory and nothing else.`;\n\n// [3] AI DATA REQUEST //\n\n// requests: OpenAI API using Functions\nconst openAIRequest = await Functions.makeHttpRequest({\n  url: `https://api.openai.com/v1/chat/completions`,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${secrets.apiKey}`,\n  },\n  data: {\n    model: \"gpt-3.5-turbo\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are generating a character backstory.\",\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ],\n  },\n  timeout: 10_000,\n  maxTokens: 100,\n  responseType: \"json\",\n});\n\nconst response = await openAIRequest;\n\n// finds: the response and returns the result (as a string).\nconst backstory = response.data?.choices[0].message.content;\n\nconsole.log(`Generated backstory: %s`, backstory);\n\nreturn Functions.encodeString(backstory || \"Failed\");\n",
      "checksum": "c7e0ee9db83cc9004e86af02fb95d0e40c7b61824c69e6e2e96e217164ede9a4",
      "subscriptionId": 2986,
      "consumerAddress": "0x5Fa21F0cf1B2F7e8F0EbAE9c3371c8271b0F73e3"
    },
    "01_onboarding_notification.js": {
      "name": "01_onboarding_notification.js",
      "path": "/mnt/x/ceptor-club/blockmagic-tech-team/packages/hardhat/functions/01_onboarding_notification.js",
      "source": "async function main(batch, url, auth) {\n  const msgs = await receive(batch, url, auth);\n  for (let i in msgs) {\n    const msg = JSON.parse(msgs[i].payload);\n    const url = msg.url;\n    const apiKey = msg.apiKey;\n    const from = msg.from;\n    const to = msg.to;\n    const username = msg.username;\n    console.log(`url ${url} apiKey ${apiKey}`);\n    await notify(url, apiKey, from, to, username);\n  }\n}\n\nasync function receive(batch, url, auth) {\n  const data = {\n    count: batch,\n    ackmode: \"ack_requeue_false\",\n    encoding: 'auto'\n  };\n\n  const request = Functions.makeHttpRequest({\n    url: url,\n    method: 'POST',\n    headers: {\n      'Authorization': `Basic ${auth}`,\n      'Content-Type': 'application/json'\n    },\n    data: data,\n    timeout: 10_000,\n    responseType: 'json'\n  });\n\n  const response = await request;\n  if (response.error) {\n    console.error(`receive msg error: ${response.code} ${response.message}`);\n    throw Error(\"Request failed\");\n  }\n\n  return response.data;\n}\n\nasync function notify(url, apiKey, from, to, username) {\n  const content = `\n    Hi, ${username}:\n  \n    Welcome to join the Ceptor Club,\n  \n    We are a worldwide party of role-players who came together to make an app that would make the process of playing a fantasy RPG together easier and more visually engaging.\n    Learn more: https://ceptor.club/.\n  \n    Please join our discord https://discord.gg/EYZwc7De.\n    `.trim();\n  const msg = {\n    personalizations: [\n      {\n        to: [{ email: to }]\n      }\n    ],\n    from: { email: from },\n    subject: 'Ceptor Club onboarding',\n    content: [\n      {\n        type: 'text/plain',\n        value: content\n      }\n    ]\n  };\n\n  const request = Functions.makeHttpRequest({\n    url: url,\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    },\n    data: msg,\n    timeout: 20_000,\n    responseType: 'json'\n  });\n\n  const response = await request;\n  if (response.error && response.message !== 'SyntaxError: Unexpected end of JSON input') {\n    console.error(`notify error: ${response.message}`);\n    throw Error(\"Request failed\");\n  } else {\n    console.log(`notify: ${response.statusText} ${response.data}`);\n  }\n}\n\nconst batch = args[0];\nif (!batch) {\n  throw Error(\"batch is missing.\");\n}\n\nconst url = args[1];\nif (!url) {\n  throw Error(\"url is missing.\");\n}\n\nconst auth = args[2];\nif (!auth) {\n  throw Error(\"auth is missing.\");\n}\n\nawait main(parseInt(batch), url, auth);\n\nreturn Functions.encodeString('Succeed');",
      "checksum": "1cc2aff0754ef305b2d0215b919fd3d1a0a25c4308412818586256487d571c4f",
      "subscriptionId": 2805,
      "consumerAddress": "0x5Fa21F0cf1B2F7e8F0EbAE9c3371c8271b0F73e3"
    }
  },
  "11155420": {
    "00_backstory_gpt.ts": {
      "name": "00_backstory_gpt.ts",
      "path": "/Users/uklok/Software Development/learning/BlockMagic Hackathon/Ceptor-scaffold-OP/packages/hardhat/functions/00_backstory_gpt.ts",
      "source": "// [1] ARGUMENT DECLARATION //\n\n// gets: character class for the backstory.\nconst CHARACTER_CLASS = args[0]; // --------------> |   Wizard\n\n// gets: character race for the backstory.\nconst CHARACTER_RACE = args[1]; // --------------> |   Elf\n\nconst CHARACTER_NAME = args[2]; // --------------> |   Eldon\n// [2] PROMPT ENGINEERING //\n\nconst prompt = `Generate a D&D 5e backstory for ${CHARACTER_NAME}, a Level 1 ${CHARACTER_CLASS} who is a ${CHARACTER_RACE}. The backstory should be extremely short, dense, powerful, engaging, coherent, and suitable for a fantasy RPG setting. Just reply with the one paragraph backstory and nothing else.`;\n\n// [3] AI DATA REQUEST //\n\n// requests: OpenAI API using Functions\nconst openAIRequest = await Functions.makeHttpRequest({\n  url: `https://api.openai.com/v1/chat/completions`,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${secrets.apiKey}`,\n  },\n  data: {\n    model: \"gpt-3.5-turbo\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are generating a character backstory.\",\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ],\n  },\n  timeout: 10_000,\n  maxTokens: 100,\n  responseType: \"json\",\n});\n\nconst response = await openAIRequest;\n\n// finds: the response and returns the result (as a string).\nconst backstory = response.data?.choices[0].message.content;\n\nconsole.log(`Generated backstory: %s`, backstory);\n\nreturn Functions.encodeString(backstory || \"Failed\");\n",
      "checksum": "c7e0ee9db83cc9004e86af02fb95d0e40c7b61824c69e6e2e96e217164ede9a4",
      "subscriptionId": 190,
      "consumerAddress": "0xe9926D1122669816E6403175B998aDD6DD776d26"
    }
  }
}